(()=>{"use strict";var e={898:(e,t,a)=>{a.r(t)},962:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0});const s=a(212);t.default=class{constructor(){this.appView=new s.AppView}start(){this.appView.drawComponents(),this.appView.drawBurgerBtn()}}},582:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0});const s=a(917),n=a(536),l=a(838);class r{constructor(){this.gameData=this.getGameDataFromLS()||(0,s.generateStartData)(),this._listeners=new Map}static getInstance(){return this.instanceDataStorage}setHintLevel(e){this.gameData[n.StorageGameDataNames.HINT]=e,this.notify(n.StorageGameDataNames.HINT,e)}setCurrentLevel(e){this.gameData[n.StorageGameDataNames.CURRENT_LEVEL]=e,this.gameData[n.StorageGameDataNames.COMPLETED].size!==l.levelsData.length?(this.notify(n.StorageGameDataNames.CURRENT_LEVEL,e),this.saveGameData()):this.saveGameData()}saveGameData(){const e=this.gameData[n.StorageGameDataNames.COMPLETED],t=this.gameData[n.StorageGameDataNames.CURRENT_LEVEL],a=this.gameData[n.StorageGameDataNames.WIN];localStorage.setItem(n.StorageGameDataNames.COMPLETED,JSON.stringify(Array.from(e))),localStorage.setItem(n.StorageGameDataNames.CURRENT_LEVEL,JSON.stringify(t)),localStorage.setItem(n.StorageGameDataNames.WIN,JSON.stringify(a))}setCompletedLevel(e,t){const a=this.gameData[n.StorageGameDataNames.COMPLETED];if(a.set(e,t),this.gameData[n.StorageGameDataNames.COMPLETED]=a,this.gameData[n.StorageGameDataNames.COMPLETED].size===l.levelsData.length)return this.gameData[n.StorageGameDataNames.WIN]=!0,this.notify(n.StorageGameDataNames.WIN,this.gameData[n.StorageGameDataNames.COMPLETED]),void this.saveGameData();this.notify(n.StorageGameDataNames.COMPLETED,this.gameData[n.StorageGameDataNames.COMPLETED]),this.saveGameData()}resetGameProgress(){this.gameData[n.StorageGameDataNames.COMPLETED]=new Map,this.saveGameData(),this.notify(n.StorageGameDataNames.COMPLETED,this.gameData[n.StorageGameDataNames.COMPLETED])}getValue(e){return this.gameData[e]?this.gameData[e]:null}getGameDataFromLS(){const e=localStorage.getItem(n.StorageGameDataNames.COMPLETED),t=localStorage.getItem(n.StorageGameDataNames.CURRENT_LEVEL),a=localStorage.getItem(n.StorageGameDataNames.WIN);return e&&t&&a?{[n.StorageGameDataNames.HINT]:null,[n.StorageGameDataNames.CURRENT_LEVEL]:Number(JSON.parse(t)),[n.StorageGameDataNames.COMPLETED]:new Map(JSON.parse(e)),[n.StorageGameDataNames.WIN]:JSON.parse(a)}:null}subscribe(e,t){let a=this._listeners.get(e);a||(a=new Set,this._listeners.set(e,a)),a.add(t)}notify(e,t){const a=this._listeners.get(e);a&&a.forEach((e=>e(t)))}}r.instanceDataStorage=new r,t.default=r},607:function(e,t,a){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=s(a(962));a(898),console.log("start"),(new n.default).start()},838:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.levelsData=void 0,t.levelsData=[{levelNumber:1,title:"Select elements by their type",selectorName:"Descendant Selector",doThis:"Select the plates",selector:"plate",syntax:"A B",hint:"Selects all <strong>B</strong> inside of <strong>A</strong>. <strong>B</strong> is called a descendant because it is inside of another element.",examples:["<strong>p&nbsp;&nbsp;strong</strong> selects all <tag>strong</tag> elements that are inside of any <tag>p</tag>"],boardMarkup:["<plate />","<plate />"],realMarkup:"<plate></plate><plate></plate>",answer:"plate plate"},{levelNumber:2,title:"Select elements by their ID",selectorName:"ID Selector",doThis:'Select the plate with the ID "fancy"',selector:"#fancy",syntax:"#idname",hint:"Selects the element with the specified <strong>idname</strong>. The ID is defined using the <strong>id</strong> attribute in the HTML markup.",examples:["<strong>#fancy</strong> selects the element with the ID <tag>fancy</tag>."],boardMarkup:["<plate />",'<plate id="fancy" />',"<plate />"],realMarkup:"<plate></plate><plate id='fancy'></plate><plate></plate>",answer:"plate"},{levelNumber:3,title:"Select elements by their tag name",selectorName:"Combine the Descendant & ID Selectors",doThis:"Select the apple on the plate",selector:"plate apple",syntax:"A B",hint:"Selects all <strong>B</strong> inside of <strong>A</strong>. <strong>B</strong> is called a descendant because it is inside of another element.",examples:["<strong>p&nbsp;&nbsp;strong</strong> selects all <tag>strong</tag> elements that are inside of any <tag>p</tag>"],boardMarkup:["<plate />","<plate>","<apple />","</plate>","<apple />"],realMarkup:"<plate></plate><plate><apple></apple></plate><apple></apple>",answer:"apple"},{levelNumber:4,title:"Select the apple on the fancy plate",selectorName:"Select apple on the fancy plate",doThis:"Select the apple on the fancy plate",selector:"#fancy apple",syntax:"#id A",hint:"You can combine any selector with the descendent selector.",examples:['<strong>#cool&nbsp;span</strong> selects all <tag>span</tag> elements that are inside of elements with <strong>id="cool"</strong>'],boardMarkup:["<plate>","<apple />","</plate>",'<plate id="fancy">',"<apple />","</plate>"],realMarkup:"<plate><apple></apple></plate><plate id='fancy'><apple></apple></plate>",answer:"apple"},{levelNumber:5,title:"Select elements by their class",selectorName:"Class selector",doThis:"Select blue bentos",selector:"bento.blue",syntax:".classname",hint:"The class selector selects all elements with that class attribute. Elements can only have one ID, but many classes.",examples:['<strong>.neato</strong> selects all elements with <strong>class="neato"</strong>'],boardMarkup:["<bento />",'<bento class="blue">',"<bento />"],realMarkup:"<bento></bento><bento class='blue'></bento><bento></bento>",answer:"bento"},{levelNumber:6,title:"Combine, selectors, with... commas!",selectorName:"Comma Combinator",doThis:"Select all apples and oranges",selector:"apple, orange",syntax:"A, B",hint:"Thanks to Shatner technology, this selects all <strong>A</strong> and <strong>B</strong> elements. You can combine any selectors this way, and you can specify more than two.",examples:['<strong>p, .fun</strong> selects all <tag>p</tag> elements as well as all elements with <strong>class="fun"</strong>'],boardMarkup:["<orange />","<bento />","<apple />","<orange />"],realMarkup:"<orange></orange><bento></bento><apple></apple><orange></orange>",answer:"orange apple orange"},{levelNumber:7,title:"Select everything on the bento",selectorName:"Combine the Universal Selector",doThis:"Select all things on the bento",selector:"bento *",syntax:"A *",hint:"This selects all elements inside of <strong>A</strong>.",examples:["<strong>p *</strong> selects every element inside all <tag>p</tag> elements.",'<strong>ul.fancy *</strong> selects every element inside all <tag>ul class="fancy"</tag> elements.'],boardMarkup:["<bento>","<orange />","</bento>","<plate>","<orange />","</plate>","<bento>","<apple />","</bento>"],realMarkup:"<bento><orange></orange></bento><plate><orange></orange></plate><bento><apple></apple></bento>",answer:"orange apple"},{levelNumber:8,title:"Select orange that follows apple",selectorName:"General Sibling Selector",doThis:"Select orange after apple",selector:"apple ~ orange",syntax:"A ~ B",hint:"You can select all siblings of an element that follow it. This is like the Adjacent Selector (A + B) except it gets all of the following elements instead of one.",examples:["<strong>A ~ B</strong> selects all <strong>B</strong> that follow a <strong>A</strong>"],boardMarkup:["<orange />","<apple />","<orange />"],realMarkup:"<orange></orange><apple></apple><orange></orange>",answer:"orange"},{levelNumber:9,title:"Select the first element of a specific type",selectorName:"First of Type Selector",doThis:"Select first plate",selector:"plate:first-of-type",syntax:":first-of-type",hint:"Selects the first element of that type within another element.",examples:["<strong>span:first-of-type</strong> selects the first <tag>span</tag> in any element."],boardMarkup:["<orange />","<plate />","<apple />","<plate />"],realMarkup:"<orange></orange><plate></plate><apple></apple><plate></plate>",answer:"plate"},{levelNumber:10,title:"Select elements that don't have children",selectorName:"Empty Selector",doThis:"Select the empty plates",selector:"plate:empty",syntax:":empty",hint:"Selects elements that don't have any other elements inside of them.",examples:["<strong>div:empty</strong> selects all empty <tag>div</tag> elements."],boardMarkup:["<plate>","<apple />","</plate>","<bento />","<plate />"],realMarkup:"<plate><apple></apple></plate><bento></bento><plate></plate>",answer:"plate"}]},917:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.generateStartData=void 0,t.generateStartData=()=>{const e={hint:null,currentLevel:1,completed:new Map,win:!1};return Object.assign(e)}},536:(e,t)=>{var a,s;Object.defineProperty(t,"__esModule",{value:!0}),t.StorageCompletedNames=t.StorageGameDataNames=void 0,function(e){e.CURRENT_LEVEL="currentLevel",e.COMPLETED="completed",e.HINT="hint",e.WIN="win"}(a||(t.StorageGameDataNames=a={})),function(e){e.SELF="self",e.HINT="hint"}(s||(t.StorageCompletedNames=s={}))},727:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getAllDescendants=void 0,t.getAllDescendants=e=>{const t=[];return function e(a){a.childNodes.forEach((a=>{a.nodeType===Node.ELEMENT_NODE&&a instanceof HTMLElement&&(t.push(a),e(a))}))}(e),t}},889:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.transformToGameMarkup=void 0,t.transformToGameMarkup=e=>e.map((e=>(/<\/\w+>/g.test(e)&&(e=e.replace(/>/g,"&gt;close")),/<\//g.test(e)&&(e=e.replace(/<\//g,"&lt;/")),/\/>/g.test(e)&&(e=e.replace(/\/>/g,"/&gt;close")),/</g.test(e)&&(e=e.replace(/</g,"open&lt;")),/>/g.test(e)&&(e=e.replace(/>/g,"&gt;")),e.replace(/open/g,"<div>").replace(/close/g,"</div>")))).join("")},217:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.validateSolution=void 0,t.validateSolution=(e,t)=>{const a=document.querySelector(".table"),s={checkResult:!1,nodes:null};if(a&&e){const n=Array.from(a.querySelectorAll(e)).map((e=>e.tagName.toLowerCase()));s.checkResult=n.join(" ")===t,s.checkResult&&(s.nodes=a.querySelectorAll(e))}return s}},212:function(e,t,a){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AppView=void 0;const n=a(561),l=a(49),r=a(761),o=a(349),i=a(383),c=a(771),d=a(640),h=a(839),u=a(838),m=s(a(582)),g=a(536),p=a(677),v=a(841);t.AppView=class{constructor(){this.storage=m.default.getInstance(),this.startLevel=this.storage.getValue(g.StorageGameDataNames.CURRENT_LEVEL),this.header=new n.Header,this.footer=new r.Footer,this.levels=new l.Levels(u.levelsData),this.rules=new o.Rules(u.levelsData),this.inputPane=new i.InputPane(u.levelsData),this.markupPane=new c.MarkupPane(u.levelsData),this.table=new d.Table(u.levelsData),this.levelInfo=new h.LevelInfo(u.levelsData),this.hoverElementsWatcher=new v.HoverElementsWatcher}drawComponents(){this.header.draw(),this.footer.draw(),this.levels.draw(this.startLevel),this.inputPane.draw(),this.markupPane.draw(this.startLevel),this.table.draw(this.startLevel),this.levelInfo.draw(this.startLevel),this.rules.draw(this.startLevel)}drawBurgerBtn(){const e=p.BurgerBtn.getInstance(),t=document.querySelector(".menu-container");e.draw(t)}}},677:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BurgerBtn=void 0;class a{constructor(){this.body=document.querySelector("body"),this.levelsContainer=document.querySelector(".levels"),this.BtnLayoutLevels=document.createElement("div"),this.BtnLayoutLevels.classList.add("menu"),this.BtnLayoutLevels.innerHTML="<div>Levels</div><div class='menu-line'></div>",this.BtnLayoutLevels&&this.BtnLayoutLevels.addEventListener("click",(()=>{this.toggleBtnLevels()}))}static getInstance(){return this.instanceBurgerBtn}draw(e){e&&e.append(this.BtnLayoutLevels)}toggleBtnLevels(){this.BtnLayoutLevels&&this.levelsContainer&&(this.body&&this.body.classList.toggle("body_withPopup"),this.BtnLayoutLevels.classList.toggle("menu_active"),this.levelsContainer.classList.toggle("levels_opened"))}}t.BurgerBtn=a,a.instanceBurgerBtn=new a},383:function(e,t,a){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.InputPane=void 0;const n=a(217),l=s(a(582)),r=a(536);t.InputPane=class{constructor(e){this.storage=l.default.getInstance(),this.keyDownListener=e=>{"Enter"===e.key&&(this.btn&&this.pressSubmitBtn(this.btn),this.input&&this.handleSubmitSolution(this.input))},this.pressSubmitBtn=e=>{e.classList.add("enterhit"),e.addEventListener("animationend",(()=>{e.classList.remove("enterhit")}))},this.levelsData=e,this.input=null,this.btn=null,this.hint=r.StorageCompletedNames.SELF,this.storage.subscribe(r.StorageGameDataNames.HINT,(e=>this.setHintValue(e))),this.storage.subscribe(r.StorageGameDataNames.CURRENT_LEVEL,(()=>this.clearInput()))}clearInput(){this.input&&(this.input.value="")}setHintValue(e){this.hint=r.StorageCompletedNames.HINT;const t=this.levelsData[e-1].selector;this.btn&&(this.btn.disabled=!0),document.removeEventListener("keydown",this.keyDownListener);let a=0;const s=setInterval((()=>{this.input&&(this.input.value+=t[a]),a++,a===t.length&&(clearInterval(s),this.btn&&(this.btn.disabled=!1),document.addEventListener("keydown",this.keyDownListener))}),150)}draw(){const e=document.querySelector(".input-pane");e&&(e.innerHTML="\n            <div class='pane-header'>\n                <div class='pane-header__name'>CSS Editor</div>\n                <div class='pane-header__file-name'>style.css</div>\n            </div>\n            <div class='pane-window pane-window_input-pane'>\n                <div class='line-numbers'>\n                    1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20\n                </div>\n                    <input class='input-pane__input input-strobe' type='text' placeholder='Type in a CSS selector'>\n                    <button class='input-pane__button'>enter</button>\n                <div>\n                    {<br>\n                    /* Styles would go here. */<br>\n                    }\n                </div>\n            </div>\n        "),this.input=document.querySelector(".input-pane__input"),this.btn=document.querySelector(".input-pane__button"),this.btn&&(this.btn.addEventListener("click",(()=>{this.btn&&this.pressSubmitBtn(this.btn),this.input&&this.handleSubmitSolution(this.input)})),document.addEventListener("keydown",this.keyDownListener))}handleSubmitSolution(e,t=this.levelsData){var a;const s=this.storage.getValue(r.StorageGameDataNames.CURRENT_LEVEL);if(e){const l=(0,n.validateSolution)(e.value,t[s-1].answer);e.value="";const o=document.querySelector(".editor");l.checkResult?l.nodes&&(null===(a=l.nodes)||void 0===a||a.forEach(((e,t)=>{e instanceof HTMLElement&&(e.classList.remove("strobe"),e.classList.add("clean"),l.nodes&&t+1===l.nodes.length&&e.addEventListener("animationend",(()=>{this.storage.setCompletedLevel(s,this.hint);const e=this.storage.getValue(r.StorageGameDataNames.COMPLETED);if(s<this.levelsData.length)this.storage.setCurrentLevel(s+1);else if(e&&e.size<10){let t=1;for(;e.get(t);)t+=1;this.storage.setCurrentLevel(t)}this.hint=r.StorageCompletedNames.SELF})))}))):o&&(o.classList.add("shake"),o.addEventListener("animationend",(()=>{o.classList.remove("shake")})))}}}},771:function(e,t,a){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.MarkupPane=void 0;const n=a(889),l=s(a(582)),r=a(536),o=a(727);t.MarkupPane=class{constructor(e){this.storage=l.default.getInstance(),this.levelsData=e,this.storage.subscribe(r.StorageGameDataNames.CURRENT_LEVEL,(e=>this.draw(e)))}draw(e){const t=document.querySelector(".markup-pane"),a=`\n            <div class='pane-header'>\n                <div class='pane-header__name'>HTML Editor</div>\n                <div class='pane-header__file-name'>table.html</div>\n            </div>\n            <div class='pane-window'>\n                <div class='line-numbers'>\n                    1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20\n                </div>\n                <div class='pane-window__content'>\n                    <div class='table-div'>&lt;div class="table"&gt;\n                            ${(0,n.transformToGameMarkup)(this.levelsData[e-1].boardMarkup)}\n                        &lt;/div&gt;\n                    </div>\n                </div>\n            </div>\n        `;t&&(t.innerHTML=a);const s=document.querySelector(".table-div");if(s instanceof HTMLElement){const e=(0,o.getAllDescendants)(s);e&&e.forEach(((e,t)=>{e instanceof HTMLDivElement&&(e.dataset.gameId=t.toString())}))}}}},761:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Footer=void 0,t.Footer=class{draw(){const e=document.querySelector("footer");e&&(e.innerHTML="\n        <a class='logo-img' href='https://rs.school/'>\n            <img src='./assets/logo_rs.svg' alt='logo'>\n            <h3>RS School 2023</h3>\n        </a>\n\n        <div class='github-img'>\n            <a href='https://github.com/vstezhko'>\n                <img src='./assets/gh3.svg' alt='github'>\n            </a>\n        </div>\n        ")}}},561:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Header=void 0,t.Header=class{draw(){const e=document.querySelector("header");e&&(e.innerHTML="\n        <div class='logo'>\n            <h1>Selectors Game</h1>\n        </div>\n        <div class='menu-container'></div>\n        ")}}},841:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.HoverElementsWatcher=void 0;const s=a(727);t.HoverElementsWatcher=class{constructor(){this.table=document.querySelector(".table"),this.markupPane=document.querySelector(".markup-pane"),this.table&&this.markupPane&&(this.table.addEventListener("mouseover",(e=>{e.target instanceof HTMLElement&&e.target.dataset.gameId&&this.hoverElements(e.target.dataset.gameId)})),this.table.addEventListener("mouseout",(e=>{e.target instanceof HTMLElement&&e.target.dataset.gameId&&this.unHoverElements(e.target.dataset.gameId)})),this.markupPane.addEventListener("mouseover",(e=>{e.target instanceof HTMLElement&&e.target.dataset.gameId&&this.hoverElements(e.target.dataset.gameId)})),this.markupPane.addEventListener("mouseout",(e=>{e.target instanceof HTMLElement&&e.target.dataset.gameId&&this.unHoverElements(e.target.dataset.gameId)})))}gatherElements(){return this.table instanceof HTMLElement&&this.markupPane instanceof HTMLElement?[...(0,s.getAllDescendants)(this.table),...(0,s.getAllDescendants)(this.markupPane)]:null}createTagInfoLabel(e){const t=e.nodeName.toLowerCase(),a=Array.from(e.classList).filter((e=>"strobe"!==e))[0],s=e.id,n=`<${t}${s?" id='"+s+"'":""}${a?" class='"+a+"'":""}></${t}>`,l=document.createElement("div");l.classList.add("tag-label"),l.textContent=n,this.table&&this.table.appendChild(l),l.style.left=e.getBoundingClientRect().left-110+"px"}removeTagInfoLabel(){const e=document.querySelector(".tag-label");e&&e.remove()}hoverElements(e){const t=this.gatherElements();t&&t.forEach((t=>{t.dataset.gameId===e&&(t.dataset.hovered="true","DIV"!==t.nodeName&&this.createTagInfoLabel(t))}))}unHoverElements(e){const t=this.gatherElements();t&&t.forEach((t=>{t.dataset.gameId===e&&(delete t.dataset.hovered,"DIV"!==t.nodeName&&this.removeTagInfoLabel())}))}}},839:function(e,t,a){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.LevelInfo=void 0;const n=s(a(582)),l=a(536);t.LevelInfo=class{constructor(e){this.storage=n.default.getInstance(),this.levelsData=e,this.storage.subscribe(l.StorageGameDataNames.CURRENT_LEVEL,(e=>this.draw(e)))}generateLayout(e){return`\n            <h2 class='table__doThis'>${this.levelsData[e-1].doThis}</h2>\n            <div class='table__note'>\n                <p class='table__toggle'>Help, I'm stuck!</p>\n            </div> \n        `}addEventListenerToHintBtn(e,t){e.addEventListener("click",(()=>{this.storage.setHintLevel(t),e.classList.add("table__toggle_hidden")}))}draw(e){const t=document.querySelector(".level-info"),a=this.generateLayout(e);t&&(t.innerHTML=a);const s=document.querySelector(".table__toggle");s instanceof HTMLElement&&this.addEventListenerToHintBtn(s,e)}}},49:function(e,t,a){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Levels=void 0;const n=s(a(582)),l=a(536),r=a(677);t.Levels=class{constructor(e){this.storage=n.default.getInstance(),this.levelsData=e,this.completedLevels=this.storage.getValue(l.StorageGameDataNames.COMPLETED),this.currentLevel=this.storage.getValue(l.StorageGameDataNames.CURRENT_LEVEL),this.storage.subscribe(l.StorageGameDataNames.CURRENT_LEVEL,(e=>{this.currentLevel=e,this.renderLevels(this.currentLevel)})),this.storage.subscribe(l.StorageGameDataNames.COMPLETED,(e=>{this.completedLevels=e,this.renderLevels(this.currentLevel)})),this.storage.subscribe(l.StorageGameDataNames.WIN,(()=>{this.renderLevels(this.currentLevel),this.showWinMessage()})),this.levelsListContainer=null}showWinMessage(){const e=document.createElement("div");e.textContent="You are win!!!",e.classList.add("win"),this.levelsListContainer&&this.levelsListContainer.append(e),r.BurgerBtn.getInstance().toggleBtnLevels()}generateLevelsListLayout(e){let t="";return this.levelsData.forEach((a=>{t+=`\n                <a class='levels__level ${a.levelNumber===e&&"levels__level_current"}' \n                data-id='${a.levelNumber}'>\n                <span class='checkmark ${this.completedLevels.has(a.levelNumber)?"checkmark_completed-"+this.completedLevels.get(a.levelNumber):""}'></span>\n                <span class='level-number'>${a.levelNumber} </span>${a.syntax}</a>\n            `})),t}draw(e){const t=document.querySelector(".levels"),a=`\n            <div class='background'></div>\n            <div class='popup'>\n                <h2>Levels</h2>\n                <div class='levels__list'>\n                    ${this.generateLevelsListLayout(e)}\n                </div>\n                <a class='reset-progress' href='#'>Reset Progress</a>\n            </div>\n\n\n        `;t&&(t.innerHTML+=a),this.levelsListContainer=document.querySelector(".levels__list");const s=document.querySelector(".reset-progress"),n=document.querySelector(".background"),l=r.BurgerBtn.getInstance();this.levelsListContainer instanceof HTMLElement&&this.levelsListContainer&&this.levelsListContainer.addEventListener("click",(e=>{if(e.target instanceof HTMLElement&&e.target.classList.contains("levels__level")&&e.target.dataset.id){const t=+e.target.dataset.id;this.storage.setCurrentLevel(t),l.toggleBtnLevels()}})),s&&s.addEventListener("click",(()=>{this.storage.resetGameProgress(),this.storage.setCurrentLevel(1),l.toggleBtnLevels()})),n&&n.addEventListener("click",(()=>{l.toggleBtnLevels()}))}renderLevels(e){this.levelsListContainer&&(this.levelsListContainer.innerHTML=this.generateLevelsListLayout(e))}}},349:function(e,t,a){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Rules=void 0;const n=s(a(582)),l=a(536);t.Rules=class{constructor(e){this.storage=n.default.getInstance(),this.levelsData=e,this.completedLevels=this.storage.getValue(l.StorageGameDataNames.COMPLETED),this.currentLevel=this.storage.getValue(l.StorageGameDataNames.CURRENT_LEVEL),this.storage.subscribe(l.StorageGameDataNames.CURRENT_LEVEL,(e=>{this.currentLevel=e,this.draw(this.currentLevel)})),this.storage.subscribe(l.StorageGameDataNames.COMPLETED,(e=>{this.completedLevels=e,this.draw(this.currentLevel)}))}draw(e){const t=document.querySelectorAll(".rules"),a=`\n            <h2 class='rules__header ${this.completedLevels.has(this.currentLevel)?"rules__header_completed-"+this.completedLevels.get(this.currentLevel):""}'>\n                <span class='rules__text'>Level ${this.levelsData[e-1].levelNumber} of 10</span>\n                <span class='checkmark'></span>\n            </h2>\n            <div class='level-nav'>\n                <a class='prev'></a>\n                <a class='next'></a>\n            </div>\n\n            <div class='rules__content'>\n                <h4 class='selector-name'>${this.levelsData[e-1].selectorName}</h4>\n                <h3 class='title'>${this.levelsData[e-1].title}</h3>\n                <h4 class='syntax'>${this.levelsData[e-1].syntax}</h4>\n                <div class='hint'>${this.levelsData[e-1].hint}</div>\n                <h5 class='examples-title'>Examples</h5>\n                <div class='examples'>\n                    ${this.levelsData[e-1].examples.map((e=>`<div class='example'>\n                        ${e}\n                    </div>`)).join("")}\n                </div>\n            </div>\n        `;t.length&&t.forEach((e=>{e instanceof HTMLElement&&(e.innerHTML=a)}));const s=document.querySelector(".rules__header");s&&s.addEventListener("click",(()=>{s.classList.toggle("rules__header_opened"),t.forEach((e=>{e instanceof HTMLElement&&e.classList.toggle("rules_opened")}))})),[...document.querySelectorAll(".prev"),...document.querySelectorAll(".next")].forEach((t=>{t instanceof HTMLElement&&t.addEventListener("click",(()=>{t.classList.contains("next")&&this.levelsData[e-1].levelNumber<this.levelsData.length&&this.storage.setCurrentLevel(this.levelsData[e-1].levelNumber+1),t.classList.contains("prev")&&this.levelsData[e-1].levelNumber>1&&this.storage.setCurrentLevel(this.levelsData[e-1].levelNumber-1)}))}))}}},640:function(e,t,a){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Table=void 0;const n=a(838),l=s(a(582)),r=a(536),o=a(727);t.Table=class{constructor(e){this.storage=l.default.getInstance(),this.storage.subscribe(r.StorageGameDataNames.CURRENT_LEVEL,(e=>this.draw(e))),this.levelsData=e,this.table=document.querySelector(".table")}draw(e){if(this.table){this.table.innerHTML=n.levelsData[e-1].realMarkup;const t=(0,o.getAllDescendants)(this.table);t&&t.forEach(((e,t)=>{e instanceof HTMLElement&&(e.dataset.gameId=t.toString())})),document.querySelectorAll(`.table ${n.levelsData[e-1].selector}`).forEach((e=>{e.classList.add("strobe")}))}}}}},t={};function a(s){var n=t[s];if(void 0!==n)return n.exports;var l=t[s]={exports:{}};return e[s].call(l.exports,l,l.exports,a),l.exports}a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFqQyxxQkFBcUJJLGVBQWdCb0ksR0FBVXhKLEtBQUtnSSxLQUFLd0IsS0FDaEZ4SixLQUFLdUIsV0FBYUEsRUFDbEJ2QixLQUFLaUcsTUFBUUMsU0FBU0MsY0FBYyxTQUN4QyxDQUVPNkIsS0FBS3ZELEdBQ1IsR0FBSXpFLEtBQUtpRyxNQUFPLENBQ1pqRyxLQUFLaUcsTUFBTXdDLFVBQVksRUFBQWxILFdBQVdrRCxFQUFlLEdBQUdILFdBQ3BELE1BQU1TLEdBQWMsSUFBQUYsbUJBQWtCN0UsS0FBS2lHLE9BQzNDbEIsR0FDSUEsRUFBWXRCLFNBQVEsQ0FBQzJHLEVBQU1QLEtBQ25CTyxhQUFnQjlFLGNBQ2hCOEUsRUFBS00sUUFBUUMsT0FBU2QsRUFBTWUsVyxJQUd4QzFFLFNBQVNNLGlCQUFpQixVQUFVLEVBQUFqRixXQUFXa0QsRUFBZSxHQUFHUixZQUFZUixTQUFTMkcsSUFDbEZBLEVBQUs1QixVQUFVakYsSUFBSSxTQUFTLEcsQ0FHeEMsRSxHQy9CQW9LLEVBQTJCLENBQUMsRUFHaEMsU0FBU0MsRUFBb0JDLEdBRTVCLElBQUlDLEVBQWVILEVBQXlCRSxHQUM1QyxRQUFxQkUsSUFBakJELEVBQ0gsT0FBT0EsRUFBYUUsUUFHckIsSUFBSUMsRUFBU04sRUFBeUJFLEdBQVksQ0FHakRHLFFBQVMsQ0FBQyxHQU9YLE9BSEFFLEVBQW9CTCxHQUFVTSxLQUFLRixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTSixHQUdwRUssRUFBT0QsT0FDZixDQ3JCQUosRUFBb0JRLEVBQUtKLElBQ0gsb0JBQVhLLFFBQTBCQSxPQUFPQyxhQUMxQzVKLE9BQU82SixlQUFlUCxFQUFTSyxPQUFPQyxZQUFhLENBQUV2TixNQUFPLFdBRTdEMkQsT0FBTzZKLGVBQWVQLEVBQVMsYUFBYyxDQUFFak4sT0FBTyxHQUFPLEVDRnBDNk0sRUFBb0IsSSIsInNvdXJjZXMiOlsid2VicGFjazovL3Jzcy1jc3Mtc2VsZWN0b3JzLy4vc3JjL2FwcC9hcHAudHMiLCJ3ZWJwYWNrOi8vcnNzLWNzcy1zZWxlY3RvcnMvLi9zcmMvZGF0YS1zdG9yYWdlL0RhdGFTdG9yYWdlLnRzIiwid2VicGFjazovL3Jzcy1jc3Mtc2VsZWN0b3JzLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovL3Jzcy1jc3Mtc2VsZWN0b3JzLy4vc3JjL21vZGVsL2xldmVsc0RhdGEudHMiLCJ3ZWJwYWNrOi8vcnNzLWNzcy1zZWxlY3RvcnMvLi9zcmMvbW9kZWwvc3RhcnRTdG9yYWdlRGF0YS50cyIsIndlYnBhY2s6Ly9yc3MtY3NzLXNlbGVjdG9ycy8uL3NyYy90eXBlcy9lbnVtLnRzIiwid2VicGFjazovL3Jzcy1jc3Mtc2VsZWN0b3JzLy4vc3JjL3V0aWxzL2dldEFsbERlc2NlbmRhbnRzLnRzIiwid2VicGFjazovL3Jzcy1jc3Mtc2VsZWN0b3JzLy4vc3JjL3V0aWxzL3RyYW5zZm9ybVRvTWFya3VwLnRzIiwid2VicGFjazovL3Jzcy1jc3Mtc2VsZWN0b3JzLy4vc3JjL3V0aWxzL3ZhbGlkYXRlU29sdXRpb24udHMiLCJ3ZWJwYWNrOi8vcnNzLWNzcy1zZWxlY3RvcnMvLi9zcmMvdmlldy9BcHBWaWV3LnRzIiwid2VicGFjazovL3Jzcy1jc3Mtc2VsZWN0b3JzLy4vc3JjL3ZpZXcvYnVyZ2VyQnRuL0J1cmdlckJ0bi50cyIsIndlYnBhY2s6Ly9yc3MtY3NzLXNlbGVjdG9ycy8uL3NyYy92aWV3L2VkaXRvci9pbnB1dFBhbmUvSW5wdXRQYW5lLnRzIiwid2VicGFjazovL3Jzcy1jc3Mtc2VsZWN0b3JzLy4vc3JjL3ZpZXcvZWRpdG9yL21hcmt1cFBhbmUvbWFya3VwUGFuZS50cyIsIndlYnBhY2s6Ly9yc3MtY3NzLXNlbGVjdG9ycy8uL3NyYy92aWV3L2Zvb3Rlci9Gb290ZXIudHMiLCJ3ZWJwYWNrOi8vcnNzLWNzcy1zZWxlY3RvcnMvLi9zcmMvdmlldy9oZWFkZXIvSGVhZGVyLnRzIiwid2VicGFjazovL3Jzcy1jc3Mtc2VsZWN0b3JzLy4vc3JjL3ZpZXcvaG92ZXJFbGVtZW50c1dhdGNoZXIvSG92ZXJFbGVtZW50c1dhdGNoZXIudHMiLCJ3ZWJwYWNrOi8vcnNzLWNzcy1zZWxlY3RvcnMvLi9zcmMvdmlldy9sZXZlbC1pbmZvL0xldmVsSW5mby50cyIsIndlYnBhY2s6Ly9yc3MtY3NzLXNlbGVjdG9ycy8uL3NyYy92aWV3L2xldmVscy9MZXZlbHMudHMiLCJ3ZWJwYWNrOi8vcnNzLWNzcy1zZWxlY3RvcnMvLi9zcmMvdmlldy9ydWxlcy9SdWxlcy50cyIsIndlYnBhY2s6Ly9yc3MtY3NzLXNlbGVjdG9ycy8uL3NyYy92aWV3L3RhYmxlL1RhYmxlLnRzIiwid2VicGFjazovL3Jzcy1jc3Mtc2VsZWN0b3JzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3Jzcy1jc3Mtc2VsZWN0b3JzL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vcnNzLWNzcy1zZWxlY3RvcnMvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFZpZXcgfSBmcm9tICcuLi92aWV3L0FwcFZpZXcnO1xuXG5jbGFzcyBBcHAge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgYXBwVmlldztcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5hcHBWaWV3ID0gbmV3IEFwcFZpZXcoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhcnQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYXBwVmlldy5kcmF3Q29tcG9uZW50cygpO1xuICAgICAgICB0aGlzLmFwcFZpZXcuZHJhd0J1cmdlckJ0bigpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXBwO1xuIiwiaW1wb3J0IHsgZ2VuZXJhdGVTdGFydERhdGEgfSBmcm9tICcuLi9tb2RlbC9zdGFydFN0b3JhZ2VEYXRhJztcbmltcG9ydCB7IFN0b3JhZ2VDb21wbGV0ZWROYW1lcywgU3RvcmFnZUdhbWVEYXRhTmFtZXMgfSBmcm9tICcuLi90eXBlcy9lbnVtJztcbmltcG9ydCB7IElUZW1wbGF0ZVN0YXJ0RGF0YSB9IGZyb20gJy4uL3R5cGVzL2ludGVyZmFjZSc7XG5pbXBvcnQgeyBDb21wbGV0ZWRMZXZlbHMgfSBmcm9tICcuLi90eXBlcy90eXBlJztcbmltcG9ydCB7IGxldmVsc0RhdGEgfSBmcm9tICcuLi9tb2RlbC9sZXZlbHNEYXRhJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGF0YVN0b3JhZ2Uge1xuICAgIHByaXZhdGUgc3RhdGljIGluc3RhbmNlRGF0YVN0b3JhZ2UgPSBuZXcgRGF0YVN0b3JhZ2UoKTtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgZ2FtZURhdGEgPSB0aGlzLmdldEdhbWVEYXRhRnJvbUxTKCkgfHwgZ2VuZXJhdGVTdGFydERhdGEoKTtcbiAgICBwcml2YXRlIF9saXN0ZW5lcnMgPSBuZXcgTWFwPFN0b3JhZ2VHYW1lRGF0YU5hbWVzLCBTZXQ8KHBhcmFtOiBudW1iZXIgfCBDb21wbGV0ZWRMZXZlbHMpID0+IHZvaWQ+PigpO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxuICAgIHByaXZhdGUgY29uc3RydWN0b3IoKSB7fVxuXG4gICAgc3RhdGljIGdldEluc3RhbmNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZURhdGFTdG9yYWdlO1xuICAgIH1cblxuICAgIHNldEhpbnRMZXZlbCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuZ2FtZURhdGFbU3RvcmFnZUdhbWVEYXRhTmFtZXMuSElOVF0gPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5ub3RpZnkoU3RvcmFnZUdhbWVEYXRhTmFtZXMuSElOVCwgdmFsdWUpO1xuICAgIH1cblxuICAgIHNldEN1cnJlbnRMZXZlbCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuZ2FtZURhdGFbU3RvcmFnZUdhbWVEYXRhTmFtZXMuQ1VSUkVOVF9MRVZFTF0gPSB2YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMuZ2FtZURhdGFbU3RvcmFnZUdhbWVEYXRhTmFtZXMuQ09NUExFVEVEXS5zaXplID09PSBsZXZlbHNEYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5zYXZlR2FtZURhdGEoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5vdGlmeShTdG9yYWdlR2FtZURhdGFOYW1lcy5DVVJSRU5UX0xFVkVMLCB2YWx1ZSk7XG4gICAgICAgIHRoaXMuc2F2ZUdhbWVEYXRhKCk7XG4gICAgfVxuXG4gICAgc2F2ZUdhbWVEYXRhKCkge1xuICAgICAgICBjb25zdCBjb21wbGV0ZWQgPSB0aGlzLmdhbWVEYXRhW1N0b3JhZ2VHYW1lRGF0YU5hbWVzLkNPTVBMRVRFRF07XG4gICAgICAgIGNvbnN0IGN1cnJMZXZlbCA9IHRoaXMuZ2FtZURhdGFbU3RvcmFnZUdhbWVEYXRhTmFtZXMuQ1VSUkVOVF9MRVZFTF07XG4gICAgICAgIGNvbnN0IHdpbiA9IHRoaXMuZ2FtZURhdGFbU3RvcmFnZUdhbWVEYXRhTmFtZXMuV0lOXTtcblxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShTdG9yYWdlR2FtZURhdGFOYW1lcy5DT01QTEVURUQsIEpTT04uc3RyaW5naWZ5KEFycmF5LmZyb20oY29tcGxldGVkKSkpO1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShTdG9yYWdlR2FtZURhdGFOYW1lcy5DVVJSRU5UX0xFVkVMLCBKU09OLnN0cmluZ2lmeShjdXJyTGV2ZWwpKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oU3RvcmFnZUdhbWVEYXRhTmFtZXMuV0lOLCBKU09OLnN0cmluZ2lmeSh3aW4pKTtcbiAgICB9XG5cbiAgICBzZXRDb21wbGV0ZWRMZXZlbCh2YWx1ZTogbnVtYmVyLCBjb21wbGV0ZWRUeXBlOiBTdG9yYWdlQ29tcGxldGVkTmFtZXMpIHtcbiAgICAgICAgY29uc3QgY29tcGxldGVkTWFwID0gdGhpcy5nYW1lRGF0YVtTdG9yYWdlR2FtZURhdGFOYW1lcy5DT01QTEVURURdO1xuICAgICAgICBjb21wbGV0ZWRNYXAuc2V0KHZhbHVlLCBjb21wbGV0ZWRUeXBlKTtcbiAgICAgICAgdGhpcy5nYW1lRGF0YVtTdG9yYWdlR2FtZURhdGFOYW1lcy5DT01QTEVURURdID0gY29tcGxldGVkTWFwO1xuICAgICAgICBpZiAodGhpcy5nYW1lRGF0YVtTdG9yYWdlR2FtZURhdGFOYW1lcy5DT01QTEVURURdLnNpemUgPT09IGxldmVsc0RhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmdhbWVEYXRhW1N0b3JhZ2VHYW1lRGF0YU5hbWVzLldJTl0gPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5ub3RpZnkoU3RvcmFnZUdhbWVEYXRhTmFtZXMuV0lOLCB0aGlzLmdhbWVEYXRhW1N0b3JhZ2VHYW1lRGF0YU5hbWVzLkNPTVBMRVRFRF0pO1xuICAgICAgICAgICAgdGhpcy5zYXZlR2FtZURhdGEoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5vdGlmeShTdG9yYWdlR2FtZURhdGFOYW1lcy5DT01QTEVURUQsIHRoaXMuZ2FtZURhdGFbU3RvcmFnZUdhbWVEYXRhTmFtZXMuQ09NUExFVEVEXSk7XG4gICAgICAgIHRoaXMuc2F2ZUdhbWVEYXRhKCk7XG4gICAgfVxuXG4gICAgcmVzZXRHYW1lUHJvZ3Jlc3MoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZ2FtZURhdGFbU3RvcmFnZUdhbWVEYXRhTmFtZXMuQ09NUExFVEVEXSA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5zYXZlR2FtZURhdGEoKTtcbiAgICAgICAgdGhpcy5ub3RpZnkoU3RvcmFnZUdhbWVEYXRhTmFtZXMuQ09NUExFVEVELCB0aGlzLmdhbWVEYXRhW1N0b3JhZ2VHYW1lRGF0YU5hbWVzLkNPTVBMRVRFRF0pO1xuICAgIH1cblxuICAgIGdldFZhbHVlKG5hbWU6IFN0b3JhZ2VHYW1lRGF0YU5hbWVzKSB7XG4gICAgICAgIGlmICh0aGlzLmdhbWVEYXRhW25hbWVdKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nYW1lRGF0YVtuYW1lXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBnZXRHYW1lRGF0YUZyb21MUygpOiBJVGVtcGxhdGVTdGFydERhdGEgfCBudWxsIHtcbiAgICAgICAgY29uc3QgbHNEYXRhQ29tcGxldGVkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oU3RvcmFnZUdhbWVEYXRhTmFtZXMuQ09NUExFVEVEKTtcbiAgICAgICAgY29uc3QgbHNEYXRhQ3VycmVudExldmVsID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oU3RvcmFnZUdhbWVEYXRhTmFtZXMuQ1VSUkVOVF9MRVZFTCk7XG4gICAgICAgIGNvbnN0IGxzRGF0YVdpbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFN0b3JhZ2VHYW1lRGF0YU5hbWVzLldJTik7XG5cbiAgICAgICAgaWYgKGxzRGF0YUNvbXBsZXRlZCAmJiBsc0RhdGFDdXJyZW50TGV2ZWwgJiYgbHNEYXRhV2luKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIFtTdG9yYWdlR2FtZURhdGFOYW1lcy5ISU5UXTogbnVsbCxcbiAgICAgICAgICAgICAgICBbU3RvcmFnZUdhbWVEYXRhTmFtZXMuQ1VSUkVOVF9MRVZFTF06IE51bWJlcihKU09OLnBhcnNlKGxzRGF0YUN1cnJlbnRMZXZlbCkpLFxuICAgICAgICAgICAgICAgIFtTdG9yYWdlR2FtZURhdGFOYW1lcy5DT01QTEVURURdOiBuZXcgTWFwPG51bWJlciwgU3RvcmFnZUNvbXBsZXRlZE5hbWVzPihKU09OLnBhcnNlKGxzRGF0YUNvbXBsZXRlZCkpLFxuICAgICAgICAgICAgICAgIFtTdG9yYWdlR2FtZURhdGFOYW1lcy5XSU5dOiBKU09OLnBhcnNlKGxzRGF0YVdpbiksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdWJzY3JpYmUobmFtZUV2ZW50OiBTdG9yYWdlR2FtZURhdGFOYW1lcywgbGlzdGVuZXJNZXRob2Q6IChwYXJhbTogbnVtYmVyIHwgQ29tcGxldGVkTGV2ZWxzKSA9PiB2b2lkKSB7XG4gICAgICAgIGxldCBsaXN0TGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzLmdldChuYW1lRXZlbnQpO1xuICAgICAgICBpZiAoIWxpc3RMaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgIGxpc3RMaXN0ZW5lcnMgPSBuZXcgU2V0PChwYXJhbTogbnVtYmVyIHwgQ29tcGxldGVkTGV2ZWxzKSA9PiB2b2lkPigpO1xuICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXJzLnNldChuYW1lRXZlbnQsIGxpc3RMaXN0ZW5lcnMpO1xuICAgICAgICB9XG4gICAgICAgIGxpc3RMaXN0ZW5lcnMuYWRkKGxpc3RlbmVyTWV0aG9kKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG5vdGlmeShuYW1lRXZlbnQ6IFN0b3JhZ2VHYW1lRGF0YU5hbWVzLCBwYXJhbXM6IG51bWJlciB8IENvbXBsZXRlZExldmVscykge1xuICAgICAgICBjb25zdCBsaXN0TGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzLmdldChuYW1lRXZlbnQpO1xuICAgICAgICBpZiAobGlzdExpc3RlbmVycykge1xuICAgICAgICAgICAgbGlzdExpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcikgPT4gbGlzdGVuZXIocGFyYW1zKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgQXBwIGZyb20gJy4vYXBwL2FwcCc7XG5pbXBvcnQgJy4vZ2xvYmFsLnNjc3MnO1xuXG5jb25zb2xlLmxvZygnc3RhcnQnKTtcblxuY29uc3QgYXBwID0gbmV3IEFwcCgpO1xuYXBwLnN0YXJ0KCk7XG4iLCJpbXBvcnQgeyBJTGV2ZWxEYXRhIH0gZnJvbSAnLi4vdHlwZXMvaW50ZXJmYWNlJztcblxuZXhwb3J0IGNvbnN0IGxldmVsc0RhdGE6IElMZXZlbERhdGFbXSA9IFtcbiAgICB7XG4gICAgICAgIGxldmVsTnVtYmVyOiAxLFxuICAgICAgICB0aXRsZTogJ1NlbGVjdCBlbGVtZW50cyBieSB0aGVpciB0eXBlJyxcbiAgICAgICAgc2VsZWN0b3JOYW1lOiAnRGVzY2VuZGFudCBTZWxlY3RvcicsXG4gICAgICAgIGRvVGhpczogJ1NlbGVjdCB0aGUgcGxhdGVzJyxcbiAgICAgICAgc2VsZWN0b3I6ICdwbGF0ZScsXG4gICAgICAgIHN5bnRheDogJ0EgQicsXG4gICAgICAgIGhpbnQ6ICdTZWxlY3RzIGFsbCA8c3Ryb25nPkI8L3N0cm9uZz4gaW5zaWRlIG9mIDxzdHJvbmc+QTwvc3Ryb25nPi4gPHN0cm9uZz5CPC9zdHJvbmc+IGlzIGNhbGxlZCBhIGRlc2NlbmRhbnQgYmVjYXVzZSBpdCBpcyBpbnNpZGUgb2YgYW5vdGhlciBlbGVtZW50LicsXG4gICAgICAgIGV4YW1wbGVzOiBbXG4gICAgICAgICAgICAnPHN0cm9uZz5wJm5ic3A7Jm5ic3A7c3Ryb25nPC9zdHJvbmc+IHNlbGVjdHMgYWxsIDx0YWc+c3Ryb25nPC90YWc+IGVsZW1lbnRzIHRoYXQgYXJlIGluc2lkZSBvZiBhbnkgPHRhZz5wPC90YWc+JyxcbiAgICAgICAgXSxcbiAgICAgICAgYm9hcmRNYXJrdXA6IFsnPHBsYXRlIC8+JywgJzxwbGF0ZSAvPiddLFxuICAgICAgICByZWFsTWFya3VwOiBgPHBsYXRlPjwvcGxhdGU+PHBsYXRlPjwvcGxhdGU+YCxcbiAgICAgICAgYW5zd2VyOiAncGxhdGUgcGxhdGUnLFxuICAgIH0sXG4gICAge1xuICAgICAgICBsZXZlbE51bWJlcjogMixcbiAgICAgICAgdGl0bGU6ICdTZWxlY3QgZWxlbWVudHMgYnkgdGhlaXIgSUQnLFxuICAgICAgICBzZWxlY3Rvck5hbWU6ICdJRCBTZWxlY3RvcicsXG4gICAgICAgIGRvVGhpczogJ1NlbGVjdCB0aGUgcGxhdGUgd2l0aCB0aGUgSUQgXCJmYW5jeVwiJyxcbiAgICAgICAgc2VsZWN0b3I6ICcjZmFuY3knLFxuICAgICAgICBzeW50YXg6ICcjaWRuYW1lJyxcbiAgICAgICAgaGludDogJ1NlbGVjdHMgdGhlIGVsZW1lbnQgd2l0aCB0aGUgc3BlY2lmaWVkIDxzdHJvbmc+aWRuYW1lPC9zdHJvbmc+LiBUaGUgSUQgaXMgZGVmaW5lZCB1c2luZyB0aGUgPHN0cm9uZz5pZDwvc3Ryb25nPiBhdHRyaWJ1dGUgaW4gdGhlIEhUTUwgbWFya3VwLicsXG4gICAgICAgIGV4YW1wbGVzOiBbJzxzdHJvbmc+I2ZhbmN5PC9zdHJvbmc+IHNlbGVjdHMgdGhlIGVsZW1lbnQgd2l0aCB0aGUgSUQgPHRhZz5mYW5jeTwvdGFnPi4nXSxcbiAgICAgICAgYm9hcmRNYXJrdXA6IFsnPHBsYXRlIC8+JywgJzxwbGF0ZSBpZD1cImZhbmN5XCIgLz4nLCAnPHBsYXRlIC8+J10sXG4gICAgICAgIHJlYWxNYXJrdXA6IGA8cGxhdGU+PC9wbGF0ZT48cGxhdGUgaWQ9J2ZhbmN5Jz48L3BsYXRlPjxwbGF0ZT48L3BsYXRlPmAsXG4gICAgICAgIGFuc3dlcjogJ3BsYXRlJyxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbGV2ZWxOdW1iZXI6IDMsXG4gICAgICAgIHRpdGxlOiAnU2VsZWN0IGVsZW1lbnRzIGJ5IHRoZWlyIHRhZyBuYW1lJyxcbiAgICAgICAgc2VsZWN0b3JOYW1lOiAnQ29tYmluZSB0aGUgRGVzY2VuZGFudCAmIElEIFNlbGVjdG9ycycsXG4gICAgICAgIGRvVGhpczogJ1NlbGVjdCB0aGUgYXBwbGUgb24gdGhlIHBsYXRlJyxcbiAgICAgICAgc2VsZWN0b3I6ICdwbGF0ZSBhcHBsZScsXG4gICAgICAgIHN5bnRheDogJ0EgQicsXG4gICAgICAgIGhpbnQ6ICdTZWxlY3RzIGFsbCA8c3Ryb25nPkI8L3N0cm9uZz4gaW5zaWRlIG9mIDxzdHJvbmc+QTwvc3Ryb25nPi4gPHN0cm9uZz5CPC9zdHJvbmc+IGlzIGNhbGxlZCBhIGRlc2NlbmRhbnQgYmVjYXVzZSBpdCBpcyBpbnNpZGUgb2YgYW5vdGhlciBlbGVtZW50LicsXG4gICAgICAgIGV4YW1wbGVzOiBbXG4gICAgICAgICAgICAnPHN0cm9uZz5wJm5ic3A7Jm5ic3A7c3Ryb25nPC9zdHJvbmc+IHNlbGVjdHMgYWxsIDx0YWc+c3Ryb25nPC90YWc+IGVsZW1lbnRzIHRoYXQgYXJlIGluc2lkZSBvZiBhbnkgPHRhZz5wPC90YWc+JyxcbiAgICAgICAgXSxcbiAgICAgICAgYm9hcmRNYXJrdXA6IFsnPHBsYXRlIC8+JywgJzxwbGF0ZT4nLCAnPGFwcGxlIC8+JywgJzwvcGxhdGU+JywgJzxhcHBsZSAvPiddLFxuICAgICAgICByZWFsTWFya3VwOiBgPHBsYXRlPjwvcGxhdGU+PHBsYXRlPjxhcHBsZT48L2FwcGxlPjwvcGxhdGU+PGFwcGxlPjwvYXBwbGU+YCxcbiAgICAgICAgYW5zd2VyOiAnYXBwbGUnLFxuICAgIH0sXG4gICAge1xuICAgICAgICBsZXZlbE51bWJlcjogNCxcbiAgICAgICAgdGl0bGU6ICdTZWxlY3QgdGhlIGFwcGxlIG9uIHRoZSBmYW5jeSBwbGF0ZScsXG4gICAgICAgIHNlbGVjdG9yTmFtZTogJ1NlbGVjdCBhcHBsZSBvbiB0aGUgZmFuY3kgcGxhdGUnLFxuICAgICAgICBkb1RoaXM6ICdTZWxlY3QgdGhlIGFwcGxlIG9uIHRoZSBmYW5jeSBwbGF0ZScsXG4gICAgICAgIHNlbGVjdG9yOiAnI2ZhbmN5IGFwcGxlJyxcbiAgICAgICAgc3ludGF4OiAnI2lkIEEnLFxuICAgICAgICBoaW50OiAnWW91IGNhbiBjb21iaW5lIGFueSBzZWxlY3RvciB3aXRoIHRoZSBkZXNjZW5kZW50IHNlbGVjdG9yLicsXG4gICAgICAgIGV4YW1wbGVzOiBbXG4gICAgICAgICAgICAnPHN0cm9uZz4jY29vbCZuYnNwO3NwYW48L3N0cm9uZz4gc2VsZWN0cyBhbGwgPHRhZz5zcGFuPC90YWc+IGVsZW1lbnRzIHRoYXQgYXJlIGluc2lkZSBvZiBlbGVtZW50cyB3aXRoIDxzdHJvbmc+aWQ9XCJjb29sXCI8L3N0cm9uZz4nLFxuICAgICAgICBdLFxuICAgICAgICBib2FyZE1hcmt1cDogWyc8cGxhdGU+JywgJzxhcHBsZSAvPicsICc8L3BsYXRlPicsICc8cGxhdGUgaWQ9XCJmYW5jeVwiPicsICc8YXBwbGUgLz4nLCAnPC9wbGF0ZT4nXSxcbiAgICAgICAgcmVhbE1hcmt1cDogYDxwbGF0ZT48YXBwbGU+PC9hcHBsZT48L3BsYXRlPjxwbGF0ZSBpZD0nZmFuY3knPjxhcHBsZT48L2FwcGxlPjwvcGxhdGU+YCxcbiAgICAgICAgYW5zd2VyOiAnYXBwbGUnLFxuICAgIH0sXG4gICAge1xuICAgICAgICBsZXZlbE51bWJlcjogNSxcbiAgICAgICAgdGl0bGU6ICdTZWxlY3QgZWxlbWVudHMgYnkgdGhlaXIgY2xhc3MnLFxuICAgICAgICBzZWxlY3Rvck5hbWU6ICdDbGFzcyBzZWxlY3RvcicsXG4gICAgICAgIGRvVGhpczogJ1NlbGVjdCBibHVlIGJlbnRvcycsXG4gICAgICAgIHNlbGVjdG9yOiAnYmVudG8uYmx1ZScsXG4gICAgICAgIHN5bnRheDogJy5jbGFzc25hbWUnLFxuICAgICAgICBoaW50OiAnVGhlIGNsYXNzIHNlbGVjdG9yIHNlbGVjdHMgYWxsIGVsZW1lbnRzIHdpdGggdGhhdCBjbGFzcyBhdHRyaWJ1dGUuIEVsZW1lbnRzIGNhbiBvbmx5IGhhdmUgb25lIElELCBidXQgbWFueSBjbGFzc2VzLicsXG4gICAgICAgIGV4YW1wbGVzOiBbJzxzdHJvbmc+Lm5lYXRvPC9zdHJvbmc+IHNlbGVjdHMgYWxsIGVsZW1lbnRzIHdpdGggPHN0cm9uZz5jbGFzcz1cIm5lYXRvXCI8L3N0cm9uZz4nXSxcbiAgICAgICAgYm9hcmRNYXJrdXA6IFsnPGJlbnRvIC8+JywgJzxiZW50byBjbGFzcz1cImJsdWVcIj4nLCAnPGJlbnRvIC8+J10sXG4gICAgICAgIHJlYWxNYXJrdXA6IGA8YmVudG8+PC9iZW50bz48YmVudG8gY2xhc3M9J2JsdWUnPjwvYmVudG8+PGJlbnRvPjwvYmVudG8+YCxcbiAgICAgICAgYW5zd2VyOiAnYmVudG8nLFxuICAgIH0sXG4gICAge1xuICAgICAgICBsZXZlbE51bWJlcjogNixcbiAgICAgICAgdGl0bGU6ICdDb21iaW5lLCBzZWxlY3RvcnMsIHdpdGguLi4gY29tbWFzIScsXG4gICAgICAgIHNlbGVjdG9yTmFtZTogJ0NvbW1hIENvbWJpbmF0b3InLFxuICAgICAgICBkb1RoaXM6ICdTZWxlY3QgYWxsIGFwcGxlcyBhbmQgb3JhbmdlcycsXG4gICAgICAgIHNlbGVjdG9yOiAnYXBwbGUsIG9yYW5nZScsXG4gICAgICAgIHN5bnRheDogJ0EsIEInLFxuICAgICAgICBoaW50OiAnVGhhbmtzIHRvIFNoYXRuZXIgdGVjaG5vbG9neSwgdGhpcyBzZWxlY3RzIGFsbCA8c3Ryb25nPkE8L3N0cm9uZz4gYW5kIDxzdHJvbmc+Qjwvc3Ryb25nPiBlbGVtZW50cy4gWW91IGNhbiBjb21iaW5lIGFueSBzZWxlY3RvcnMgdGhpcyB3YXksIGFuZCB5b3UgY2FuIHNwZWNpZnkgbW9yZSB0aGFuIHR3by4nLFxuICAgICAgICBleGFtcGxlczogW1xuICAgICAgICAgICAgJzxzdHJvbmc+cCwgLmZ1bjwvc3Ryb25nPiBzZWxlY3RzIGFsbCA8dGFnPnA8L3RhZz4gZWxlbWVudHMgYXMgd2VsbCBhcyBhbGwgZWxlbWVudHMgd2l0aCA8c3Ryb25nPmNsYXNzPVwiZnVuXCI8L3N0cm9uZz4nLFxuICAgICAgICBdLFxuICAgICAgICBib2FyZE1hcmt1cDogWyc8b3JhbmdlIC8+JywgJzxiZW50byAvPicsICc8YXBwbGUgLz4nLCAnPG9yYW5nZSAvPiddLFxuICAgICAgICByZWFsTWFya3VwOiBgPG9yYW5nZT48L29yYW5nZT48YmVudG8+PC9iZW50bz48YXBwbGU+PC9hcHBsZT48b3JhbmdlPjwvb3JhbmdlPmAsXG4gICAgICAgIGFuc3dlcjogJ29yYW5nZSBhcHBsZSBvcmFuZ2UnLFxuICAgIH0sXG4gICAge1xuICAgICAgICBsZXZlbE51bWJlcjogNyxcbiAgICAgICAgdGl0bGU6ICdTZWxlY3QgZXZlcnl0aGluZyBvbiB0aGUgYmVudG8nLFxuICAgICAgICBzZWxlY3Rvck5hbWU6ICdDb21iaW5lIHRoZSBVbml2ZXJzYWwgU2VsZWN0b3InLFxuICAgICAgICBkb1RoaXM6ICdTZWxlY3QgYWxsIHRoaW5ncyBvbiB0aGUgYmVudG8nLFxuICAgICAgICBzZWxlY3RvcjogJ2JlbnRvIConLFxuICAgICAgICBzeW50YXg6ICdBIConLFxuICAgICAgICBoaW50OiAnVGhpcyBzZWxlY3RzIGFsbCBlbGVtZW50cyBpbnNpZGUgb2YgPHN0cm9uZz5BPC9zdHJvbmc+LicsXG4gICAgICAgIGV4YW1wbGVzOiBbXG4gICAgICAgICAgICAnPHN0cm9uZz5wICo8L3N0cm9uZz4gc2VsZWN0cyBldmVyeSBlbGVtZW50IGluc2lkZSBhbGwgPHRhZz5wPC90YWc+IGVsZW1lbnRzLicsXG4gICAgICAgICAgICAnPHN0cm9uZz51bC5mYW5jeSAqPC9zdHJvbmc+IHNlbGVjdHMgZXZlcnkgZWxlbWVudCBpbnNpZGUgYWxsIDx0YWc+dWwgY2xhc3M9XCJmYW5jeVwiPC90YWc+IGVsZW1lbnRzLicsXG4gICAgICAgIF0sXG4gICAgICAgIGJvYXJkTWFya3VwOiBbXG4gICAgICAgICAgICAnPGJlbnRvPicsXG4gICAgICAgICAgICAnPG9yYW5nZSAvPicsXG4gICAgICAgICAgICAnPC9iZW50bz4nLFxuICAgICAgICAgICAgJzxwbGF0ZT4nLFxuICAgICAgICAgICAgJzxvcmFuZ2UgLz4nLFxuICAgICAgICAgICAgJzwvcGxhdGU+JyxcbiAgICAgICAgICAgICc8YmVudG8+JyxcbiAgICAgICAgICAgICc8YXBwbGUgLz4nLFxuICAgICAgICAgICAgJzwvYmVudG8+JyxcbiAgICAgICAgXSxcbiAgICAgICAgcmVhbE1hcmt1cDogYDxiZW50bz48b3JhbmdlPjwvb3JhbmdlPjwvYmVudG8+PHBsYXRlPjxvcmFuZ2U+PC9vcmFuZ2U+PC9wbGF0ZT48YmVudG8+PGFwcGxlPjwvYXBwbGU+PC9iZW50bz5gLFxuICAgICAgICBhbnN3ZXI6ICdvcmFuZ2UgYXBwbGUnLFxuICAgIH0sXG4gICAge1xuICAgICAgICBsZXZlbE51bWJlcjogOCxcbiAgICAgICAgdGl0bGU6ICdTZWxlY3Qgb3JhbmdlIHRoYXQgZm9sbG93cyBhcHBsZScsXG4gICAgICAgIHNlbGVjdG9yTmFtZTogJ0dlbmVyYWwgU2libGluZyBTZWxlY3RvcicsXG4gICAgICAgIGRvVGhpczogJ1NlbGVjdCBvcmFuZ2UgYWZ0ZXIgYXBwbGUnLFxuICAgICAgICBzZWxlY3RvcjogJ2FwcGxlIH4gb3JhbmdlJyxcbiAgICAgICAgc3ludGF4OiAnQSB+IEInLFxuICAgICAgICBoaW50OiAnWW91IGNhbiBzZWxlY3QgYWxsIHNpYmxpbmdzIG9mIGFuIGVsZW1lbnQgdGhhdCBmb2xsb3cgaXQuIFRoaXMgaXMgbGlrZSB0aGUgQWRqYWNlbnQgU2VsZWN0b3IgKEEgKyBCKSBleGNlcHQgaXQgZ2V0cyBhbGwgb2YgdGhlIGZvbGxvd2luZyBlbGVtZW50cyBpbnN0ZWFkIG9mIG9uZS4nLFxuICAgICAgICBleGFtcGxlczogWyc8c3Ryb25nPkEgfiBCPC9zdHJvbmc+IHNlbGVjdHMgYWxsIDxzdHJvbmc+Qjwvc3Ryb25nPiB0aGF0IGZvbGxvdyBhIDxzdHJvbmc+QTwvc3Ryb25nPiddLFxuICAgICAgICBib2FyZE1hcmt1cDogWyc8b3JhbmdlIC8+JywgJzxhcHBsZSAvPicsICc8b3JhbmdlIC8+J10sXG4gICAgICAgIHJlYWxNYXJrdXA6IGA8b3JhbmdlPjwvb3JhbmdlPjxhcHBsZT48L2FwcGxlPjxvcmFuZ2U+PC9vcmFuZ2U+YCxcbiAgICAgICAgYW5zd2VyOiAnb3JhbmdlJyxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbGV2ZWxOdW1iZXI6IDksXG4gICAgICAgIHRpdGxlOiAnU2VsZWN0IHRoZSBmaXJzdCBlbGVtZW50IG9mIGEgc3BlY2lmaWMgdHlwZScsXG4gICAgICAgIHNlbGVjdG9yTmFtZTogJ0ZpcnN0IG9mIFR5cGUgU2VsZWN0b3InLFxuICAgICAgICBkb1RoaXM6ICdTZWxlY3QgZmlyc3QgcGxhdGUnLFxuICAgICAgICBzZWxlY3RvcjogJ3BsYXRlOmZpcnN0LW9mLXR5cGUnLFxuICAgICAgICBzeW50YXg6ICc6Zmlyc3Qtb2YtdHlwZScsXG4gICAgICAgIGhpbnQ6ICdTZWxlY3RzIHRoZSBmaXJzdCBlbGVtZW50IG9mIHRoYXQgdHlwZSB3aXRoaW4gYW5vdGhlciBlbGVtZW50LicsXG4gICAgICAgIGV4YW1wbGVzOiBbJzxzdHJvbmc+c3BhbjpmaXJzdC1vZi10eXBlPC9zdHJvbmc+IHNlbGVjdHMgdGhlIGZpcnN0IDx0YWc+c3BhbjwvdGFnPiBpbiBhbnkgZWxlbWVudC4nXSxcbiAgICAgICAgYm9hcmRNYXJrdXA6IFsnPG9yYW5nZSAvPicsICc8cGxhdGUgLz4nLCAnPGFwcGxlIC8+JywgJzxwbGF0ZSAvPiddLFxuICAgICAgICByZWFsTWFya3VwOiBgPG9yYW5nZT48L29yYW5nZT48cGxhdGU+PC9wbGF0ZT48YXBwbGU+PC9hcHBsZT48cGxhdGU+PC9wbGF0ZT5gLFxuICAgICAgICBhbnN3ZXI6ICdwbGF0ZScsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGxldmVsTnVtYmVyOiAxMCxcbiAgICAgICAgdGl0bGU6IFwiU2VsZWN0IGVsZW1lbnRzIHRoYXQgZG9uJ3QgaGF2ZSBjaGlsZHJlblwiLFxuICAgICAgICBzZWxlY3Rvck5hbWU6ICdFbXB0eSBTZWxlY3RvcicsXG4gICAgICAgIGRvVGhpczogJ1NlbGVjdCB0aGUgZW1wdHkgcGxhdGVzJyxcbiAgICAgICAgc2VsZWN0b3I6ICdwbGF0ZTplbXB0eScsXG4gICAgICAgIHN5bnRheDogJzplbXB0eScsXG4gICAgICAgIGhpbnQ6IFwiU2VsZWN0cyBlbGVtZW50cyB0aGF0IGRvbid0IGhhdmUgYW55IG90aGVyIGVsZW1lbnRzIGluc2lkZSBvZiB0aGVtLlwiLFxuICAgICAgICBleGFtcGxlczogWyc8c3Ryb25nPmRpdjplbXB0eTwvc3Ryb25nPiBzZWxlY3RzIGFsbCBlbXB0eSA8dGFnPmRpdjwvdGFnPiBlbGVtZW50cy4nXSxcbiAgICAgICAgYm9hcmRNYXJrdXA6IFsnPHBsYXRlPicsICc8YXBwbGUgLz4nLCAnPC9wbGF0ZT4nLCAnPGJlbnRvIC8+JywgJzxwbGF0ZSAvPiddLFxuICAgICAgICByZWFsTWFya3VwOiBgPHBsYXRlPjxhcHBsZT48L2FwcGxlPjwvcGxhdGU+PGJlbnRvPjwvYmVudG8+PHBsYXRlPjwvcGxhdGU+YCxcbiAgICAgICAgYW5zd2VyOiAncGxhdGUnLFxuICAgIH0sXG5dO1xuIiwiaW1wb3J0IHsgSVRlbXBsYXRlU3RhcnREYXRhIH0gZnJvbSAnLi4vdHlwZXMvaW50ZXJmYWNlJztcblxuZXhwb3J0IGNvbnN0IGdlbmVyYXRlU3RhcnREYXRhID0gKCk6IElUZW1wbGF0ZVN0YXJ0RGF0YSA9PiB7XG4gICAgY29uc3QgdGVtcGxhdGUgPSB7XG4gICAgICAgIGhpbnQ6IG51bGwsXG4gICAgICAgIGN1cnJlbnRMZXZlbDogMSxcbiAgICAgICAgY29tcGxldGVkOiBuZXcgTWFwKCksXG4gICAgICAgIHdpbjogZmFsc2UsXG4gICAgfTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih0ZW1wbGF0ZSk7XG59O1xuIiwiZXhwb3J0IGVudW0gU3RvcmFnZUdhbWVEYXRhTmFtZXMge1xuICAgIENVUlJFTlRfTEVWRUwgPSAnY3VycmVudExldmVsJyxcbiAgICBDT01QTEVURUQgPSAnY29tcGxldGVkJyxcbiAgICBISU5UID0gJ2hpbnQnLFxuICAgIFdJTiA9ICd3aW4nLFxufVxuXG5leHBvcnQgZW51bSBTdG9yYWdlQ29tcGxldGVkTmFtZXMge1xuICAgIFNFTEYgPSAnc2VsZicsXG4gICAgSElOVCA9ICdoaW50Jyxcbn1cbiIsImV4cG9ydCBjb25zdCBnZXRBbGxEZXNjZW5kYW50cyA9IChlbGVtZW50OiBIVE1MRWxlbWVudCk6IEhUTUxFbGVtZW50W10gPT4ge1xuICAgIGNvbnN0IGRlc2NlbmRhbnRzOiBIVE1MRWxlbWVudFtdID0gW107XG5cbiAgICBmdW5jdGlvbiBnZXREZXNjZW5kYW50cyhlbGVtZW50OiBIVE1MRWxlbWVudCk6IHZvaWQge1xuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IGVsZW1lbnQuY2hpbGROb2RlcztcblxuICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgICAgICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc2NlbmRhbnRzLnB1c2goY2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICBnZXREZXNjZW5kYW50cyhjaGlsZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXREZXNjZW5kYW50cyhlbGVtZW50KTtcbiAgICByZXR1cm4gZGVzY2VuZGFudHM7XG59O1xuIiwiZXhwb3J0IGNvbnN0IHRyYW5zZm9ybVRvR2FtZU1hcmt1cCA9IChodG1sOiBzdHJpbmdbXSk6IHN0cmluZyA9PiB7XG4gICAgY29uc3QgbmV3QXJyYXkgPSBodG1sLm1hcCgodGFnKSA9PiB7XG4gICAgICAgIC8vIDwvIC4uLiA+ICAgPT4gICZndDtjbG9zZSAgICAgICg9PiA+PC9kaXY+OylcbiAgICAgICAgaWYgKC88XFwvXFx3Kz4vZy50ZXN0KHRhZykpIHtcbiAgICAgICAgICAgIHRhZyA9IHRhZy5yZXBsYWNlKC8+L2csICcmZ3Q7Y2xvc2UnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIDwvICAgPT4gICAmbHQ7LyAgICAgKD0+IDwvKVxuICAgICAgICBpZiAoLzxcXC8vZy50ZXN0KHRhZykpIHtcbiAgICAgICAgICAgIHRhZyA9IHRhZy5yZXBsYWNlKC88XFwvL2csICcmbHQ7LycpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gLz4gICA9PiAgLyZndDtjbG9zZSAgICAgICg9PiAvPjwvZGl2PjspXG4gICAgICAgIGlmICgvXFwvPi9nLnRlc3QodGFnKSkge1xuICAgICAgICAgICAgdGFnID0gdGFnLnJlcGxhY2UoL1xcLz4vZywgJy8mZ3Q7Y2xvc2UnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIDwgICA9PiAgb3BlbiZsdDsgICAgICAoPT4gPGRpdj48OylcbiAgICAgICAgaWYgKC88L2cudGVzdCh0YWcpKSB7XG4gICAgICAgICAgICB0YWcgPSB0YWcucmVwbGFjZSgvPC9nLCAnb3BlbiZsdDsnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vID4gICA9PiAgJmd0OyAgICAgICg9PiA+KVxuICAgICAgICBpZiAoLz4vZy50ZXN0KHRhZykpIHtcbiAgICAgICAgICAgIHRhZyA9IHRhZy5yZXBsYWNlKC8+L2csICcmZ3Q7Jyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFnLnJlcGxhY2UoL29wZW4vZywgJzxkaXY+JykucmVwbGFjZSgvY2xvc2UvZywgJzwvZGl2PicpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5ld0FycmF5LmpvaW4oJycpO1xufTtcbiIsImltcG9ydCB7IFJlc3VsdFR5cGUgfSBmcm9tICcuLi90eXBlcy90eXBlJztcblxuZXhwb3J0IGNvbnN0IHZhbGlkYXRlU29sdXRpb24gPSAoc29sdXRpb246IHN0cmluZywgYW5zd2VyOiBzdHJpbmcpOiBSZXN1bHRUeXBlID0+IHtcbiAgICBjb25zdCB0YWJsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50YWJsZScpO1xuICAgIGNvbnN0IHJlc3VsdDogUmVzdWx0VHlwZSA9IHtcbiAgICAgICAgY2hlY2tSZXN1bHQ6IGZhbHNlLFxuICAgICAgICBub2RlczogbnVsbCxcbiAgICB9O1xuXG4gICAgaWYgKHRhYmxlICYmIHNvbHV0aW9uKSB7XG4gICAgICAgIGNvbnN0IGFycjogc3RyaW5nW10gPSBBcnJheS5mcm9tKHRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoc29sdXRpb24pKS5tYXAoKGVsZW0pID0+IGVsZW0udGFnTmFtZS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgcmVzdWx0LmNoZWNrUmVzdWx0ID0gYXJyLmpvaW4oJyAnKSA9PT0gYW5zd2VyO1xuICAgICAgICBpZiAocmVzdWx0LmNoZWNrUmVzdWx0KSB7XG4gICAgICAgICAgICByZXN1bHQubm9kZXMgPSB0YWJsZS5xdWVyeVNlbGVjdG9yQWxsKHNvbHV0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbiIsImltcG9ydCB7IEhlYWRlciB9IGZyb20gJy4vaGVhZGVyL0hlYWRlcic7XG5pbXBvcnQgeyBMZXZlbHMgfSBmcm9tICcuL2xldmVscy9MZXZlbHMnO1xuaW1wb3J0IHsgRm9vdGVyIH0gZnJvbSAnLi9mb290ZXIvRm9vdGVyJztcbmltcG9ydCB7IFJ1bGVzIH0gZnJvbSAnLi9ydWxlcy9SdWxlcyc7XG5pbXBvcnQgeyBJbnB1dFBhbmUgfSBmcm9tICcuL2VkaXRvci9pbnB1dFBhbmUvSW5wdXRQYW5lJztcbmltcG9ydCB7IE1hcmt1cFBhbmUgfSBmcm9tICcuL2VkaXRvci9tYXJrdXBQYW5lL21hcmt1cFBhbmUnO1xuaW1wb3J0IHsgVGFibGUgfSBmcm9tICcuL3RhYmxlL1RhYmxlJztcbmltcG9ydCB7IExldmVsSW5mbyB9IGZyb20gJy4vbGV2ZWwtaW5mby9MZXZlbEluZm8nO1xuaW1wb3J0IHsgbGV2ZWxzRGF0YSB9IGZyb20gJy4uL21vZGVsL2xldmVsc0RhdGEnO1xuaW1wb3J0IERhdGFTdG9yYWdlIGZyb20gJy4uL2RhdGEtc3RvcmFnZS9EYXRhU3RvcmFnZSc7XG5pbXBvcnQgeyBTdG9yYWdlR2FtZURhdGFOYW1lcyB9IGZyb20gJy4uL3R5cGVzL2VudW0nO1xuaW1wb3J0IHsgQnVyZ2VyQnRuIH0gZnJvbSAnLi9idXJnZXJCdG4vQnVyZ2VyQnRuJztcbmltcG9ydCB7IEVsZW1lbnQgfSBmcm9tICcuLi90eXBlcy90eXBlJztcbmltcG9ydCB7IEhvdmVyRWxlbWVudHNXYXRjaGVyIH0gZnJvbSAnLi9ob3ZlckVsZW1lbnRzV2F0Y2hlci9Ib3ZlckVsZW1lbnRzV2F0Y2hlcic7XG5cbmV4cG9ydCBjbGFzcyBBcHBWaWV3IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGhlYWRlcjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGZvb3RlcjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGxldmVscztcbiAgICBwcml2YXRlIHJlYWRvbmx5IHJ1bGVzO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgaW5wdXRQYW5lO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgbWFya3VwUGFuZTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHRhYmxlO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgbGV2ZWxJbmZvO1xuICAgIHByaXZhdGUgc3RvcmFnZSA9IERhdGFTdG9yYWdlLmdldEluc3RhbmNlKCk7XG4gICAgcHJpdmF0ZSByZWFkb25seSBzdGFydExldmVsO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgaG92ZXJFbGVtZW50c1dhdGNoZXI7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5zdGFydExldmVsID0gdGhpcy5zdG9yYWdlLmdldFZhbHVlKFN0b3JhZ2VHYW1lRGF0YU5hbWVzLkNVUlJFTlRfTEVWRUwpIGFzIG51bWJlcjtcbiAgICAgICAgdGhpcy5oZWFkZXIgPSBuZXcgSGVhZGVyKCk7XG4gICAgICAgIHRoaXMuZm9vdGVyID0gbmV3IEZvb3RlcigpO1xuICAgICAgICB0aGlzLmxldmVscyA9IG5ldyBMZXZlbHMobGV2ZWxzRGF0YSk7XG4gICAgICAgIHRoaXMucnVsZXMgPSBuZXcgUnVsZXMobGV2ZWxzRGF0YSk7XG4gICAgICAgIHRoaXMuaW5wdXRQYW5lID0gbmV3IElucHV0UGFuZShsZXZlbHNEYXRhKTtcbiAgICAgICAgdGhpcy5tYXJrdXBQYW5lID0gbmV3IE1hcmt1cFBhbmUobGV2ZWxzRGF0YSk7XG4gICAgICAgIHRoaXMudGFibGUgPSBuZXcgVGFibGUobGV2ZWxzRGF0YSk7XG4gICAgICAgIHRoaXMubGV2ZWxJbmZvID0gbmV3IExldmVsSW5mbyhsZXZlbHNEYXRhKTtcbiAgICAgICAgdGhpcy5ob3ZlckVsZW1lbnRzV2F0Y2hlciA9IG5ldyBIb3ZlckVsZW1lbnRzV2F0Y2hlcigpO1xuICAgIH1cblxuICAgIHB1YmxpYyBkcmF3Q29tcG9uZW50cygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5oZWFkZXIuZHJhdygpO1xuICAgICAgICB0aGlzLmZvb3Rlci5kcmF3KCk7XG4gICAgICAgIHRoaXMubGV2ZWxzLmRyYXcodGhpcy5zdGFydExldmVsKTtcbiAgICAgICAgdGhpcy5pbnB1dFBhbmUuZHJhdygpO1xuICAgICAgICB0aGlzLm1hcmt1cFBhbmUuZHJhdyh0aGlzLnN0YXJ0TGV2ZWwpO1xuICAgICAgICB0aGlzLnRhYmxlLmRyYXcodGhpcy5zdGFydExldmVsKTtcbiAgICAgICAgdGhpcy5sZXZlbEluZm8uZHJhdyh0aGlzLnN0YXJ0TGV2ZWwpO1xuICAgICAgICB0aGlzLnJ1bGVzLmRyYXcodGhpcy5zdGFydExldmVsKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZHJhd0J1cmdlckJ0bigpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgYnRuID0gQnVyZ2VyQnRuLmdldEluc3RhbmNlKCk7XG4gICAgICAgIGNvbnN0IG1lbnU6IEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWVudS1jb250YWluZXInKTtcbiAgICAgICAgYnRuLmRyYXcobWVudSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRWxlbWVudCB9IGZyb20gJy4uLy4uL3R5cGVzL3R5cGUnO1xuXG5leHBvcnQgY2xhc3MgQnVyZ2VyQnRuIHtcbiAgICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZUJ1cmdlckJ0biA9IG5ldyBCdXJnZXJCdG4oKTtcbiAgICByZWFkb25seSBCdG5MYXlvdXRMZXZlbHM6IE5vZGUgJiBFbGVtZW50O1xuICAgIHByaXZhdGUgcmVhZG9ubHkgbGV2ZWxzQ29udGFpbmVyOiBFbGVtZW50O1xuICAgIHByaXZhdGUgcmVhZG9ubHkgYm9keTogRWxlbWVudDtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XG4gICAgICAgIHRoaXMubGV2ZWxzQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcjxIVE1MRGl2RWxlbWVudD4oJy5sZXZlbHMnKTtcbiAgICAgICAgdGhpcy5CdG5MYXlvdXRMZXZlbHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5CdG5MYXlvdXRMZXZlbHMuY2xhc3NMaXN0LmFkZCgnbWVudScpO1xuICAgICAgICB0aGlzLkJ0bkxheW91dExldmVscy5pbm5lckhUTUwgPSBgPGRpdj5MZXZlbHM8L2Rpdj48ZGl2IGNsYXNzPSdtZW51LWxpbmUnPjwvZGl2PmA7XG5cbiAgICAgICAgaWYgKHRoaXMuQnRuTGF5b3V0TGV2ZWxzKSB7XG4gICAgICAgICAgICB0aGlzLkJ0bkxheW91dExldmVscy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUJ0bkxldmVscygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0SW5zdGFuY2UoKTogQnVyZ2VyQnRuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2VCdXJnZXJCdG47XG4gICAgfVxuICAgIHB1YmxpYyBkcmF3KGNvbnRhaW5lckVsZW1lbnQ6IEVsZW1lbnQpIHtcbiAgICAgICAgaWYgKGNvbnRhaW5lckVsZW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQuYXBwZW5kKHRoaXMuQnRuTGF5b3V0TGV2ZWxzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRvZ2dsZUJ0bkxldmVscygpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuQnRuTGF5b3V0TGV2ZWxzICYmIHRoaXMubGV2ZWxzQ29udGFpbmVyKSB7XG4gICAgICAgICAgICB0aGlzLmJvZHkgJiYgdGhpcy5ib2R5LmNsYXNzTGlzdC50b2dnbGUoJ2JvZHlfd2l0aFBvcHVwJyk7XG4gICAgICAgICAgICB0aGlzLkJ0bkxheW91dExldmVscy5jbGFzc0xpc3QudG9nZ2xlKCdtZW51X2FjdGl2ZScpO1xuICAgICAgICAgICAgdGhpcy5sZXZlbHNDb250YWluZXIuY2xhc3NMaXN0LnRvZ2dsZSgnbGV2ZWxzX29wZW5lZCcpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcGxldGVkTGV2ZWxzLCBFbGVtZW50LCBJbnB1dCB9IGZyb20gJy4uLy4uLy4uL3R5cGVzL3R5cGUnO1xuaW1wb3J0IHsgdmFsaWRhdGVTb2x1dGlvbiB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3ZhbGlkYXRlU29sdXRpb24nO1xuaW1wb3J0IHsgSUxldmVsRGF0YSB9IGZyb20gJy4uLy4uLy4uL3R5cGVzL2ludGVyZmFjZSc7XG5pbXBvcnQgRGF0YVN0b3JhZ2UgZnJvbSAnLi4vLi4vLi4vZGF0YS1zdG9yYWdlL0RhdGFTdG9yYWdlJztcbmltcG9ydCB7IFN0b3JhZ2VDb21wbGV0ZWROYW1lcywgU3RvcmFnZUdhbWVEYXRhTmFtZXMgfSBmcm9tICcuLi8uLi8uLi90eXBlcy9lbnVtJztcblxuZXhwb3J0IGNsYXNzIElucHV0UGFuZSB7XG4gICAgcHJpdmF0ZSBzdG9yYWdlID0gRGF0YVN0b3JhZ2UuZ2V0SW5zdGFuY2UoKTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGxldmVsc0RhdGE6IElMZXZlbERhdGFbXTtcbiAgICBwcml2YXRlIGlucHV0OiBJbnB1dDtcbiAgICBwcml2YXRlIGJ0bjogSFRNTEJ1dHRvbkVsZW1lbnQgfCBudWxsO1xuICAgIHByaXZhdGUgaGludDogU3RvcmFnZUNvbXBsZXRlZE5hbWVzO1xuXG4gICAgY29uc3RydWN0b3IobGV2ZWxzRGF0YTogSUxldmVsRGF0YVtdKSB7XG4gICAgICAgIHRoaXMubGV2ZWxzRGF0YSA9IGxldmVsc0RhdGE7XG4gICAgICAgIHRoaXMuaW5wdXQgPSBudWxsO1xuICAgICAgICB0aGlzLmJ0biA9IG51bGw7XG4gICAgICAgIHRoaXMuaGludCA9IFN0b3JhZ2VDb21wbGV0ZWROYW1lcy5TRUxGO1xuICAgICAgICB0aGlzLnN0b3JhZ2Uuc3Vic2NyaWJlKFN0b3JhZ2VHYW1lRGF0YU5hbWVzLkhJTlQsIChsZXZlbCkgPT4gdGhpcy5zZXRIaW50VmFsdWUobGV2ZWwgYXMgbnVtYmVyKSk7XG4gICAgICAgIHRoaXMuc3RvcmFnZS5zdWJzY3JpYmUoU3RvcmFnZUdhbWVEYXRhTmFtZXMuQ1VSUkVOVF9MRVZFTCwgKCkgPT4gdGhpcy5jbGVhcklucHV0KCkpO1xuICAgIH1cblxuICAgIGNsZWFySW5wdXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuaW5wdXQgJiYgKHRoaXMuaW5wdXQudmFsdWUgPSAnJyk7XG4gICAgfVxuXG4gICAgc2V0SGludFZhbHVlKGxldmVsOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5oaW50ID0gU3RvcmFnZUNvbXBsZXRlZE5hbWVzLkhJTlQ7XG4gICAgICAgIGNvbnN0IGhpbnQgPSB0aGlzLmxldmVsc0RhdGFbbGV2ZWwgLSAxXS5zZWxlY3RvcjtcbiAgICAgICAgdGhpcy5idG4gJiYgKHRoaXMuYnRuLmRpc2FibGVkID0gdHJ1ZSk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmtleURvd25MaXN0ZW5lcik7XG5cbiAgICAgICAgbGV0IGluZGV4ID0gMDtcbiAgICAgICAgY29uc3QgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmlucHV0ICYmICh0aGlzLmlucHV0LnZhbHVlICs9IGhpbnRbaW5kZXhdKTtcbiAgICAgICAgICAgIGluZGV4Kys7XG5cbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gaGludC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICAgICAgICAgICAgICB0aGlzLmJ0biAmJiAodGhpcy5idG4uZGlzYWJsZWQgPSBmYWxzZSk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMua2V5RG93bkxpc3RlbmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgMTUwKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZHJhdygpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgaW5wdXRQYW5lQ29udGFpbmVyOiBFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcjxIVE1MRGl2RWxlbWVudD4oJy5pbnB1dC1wYW5lJyk7XG4gICAgICAgIGNvbnN0IGlucHV0UGFuZUxheW91dCA9IGBcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9J3BhbmUtaGVhZGVyJz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwYW5lLWhlYWRlcl9fbmFtZSc+Q1NTIEVkaXRvcjwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3BhbmUtaGVhZGVyX19maWxlLW5hbWUnPnN0eWxlLmNzczwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdwYW5lLXdpbmRvdyBwYW5lLXdpbmRvd19pbnB1dC1wYW5lJz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdsaW5lLW51bWJlcnMnPlxuICAgICAgICAgICAgICAgICAgICAxPGJyPjI8YnI+Mzxicj40PGJyPjU8YnI+Njxicj43PGJyPjg8YnI+OTxicj4xMDxicj4xMTxicj4xMjxicj4xMzxicj4xNDxicj4xNTxicj4xNjxicj4xNzxicj4xODxicj4xOTxicj4yMFxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9J2lucHV0LXBhbmVfX2lucHV0IGlucHV0LXN0cm9iZScgdHlwZT0ndGV4dCcgcGxhY2Vob2xkZXI9J1R5cGUgaW4gYSBDU1Mgc2VsZWN0b3InPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSdpbnB1dC1wYW5lX19idXR0b24nPmVudGVyPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgezxicj5cbiAgICAgICAgICAgICAgICAgICAgLyogU3R5bGVzIHdvdWxkIGdvIGhlcmUuICovPGJyPlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgYDtcblxuICAgICAgICBpZiAoaW5wdXRQYW5lQ29udGFpbmVyKSB7XG4gICAgICAgICAgICBpbnB1dFBhbmVDb250YWluZXIuaW5uZXJIVE1MID0gaW5wdXRQYW5lTGF5b3V0O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pbnB1dC1wYW5lX19pbnB1dCcpO1xuICAgICAgICB0aGlzLmJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pbnB1dC1wYW5lX19idXR0b24nKTtcblxuICAgICAgICBpZiAodGhpcy5idG4pIHtcbiAgICAgICAgICAgIHRoaXMuYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYnRuICYmIHRoaXMucHJlc3NTdWJtaXRCdG4odGhpcy5idG4pO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5wdXQgJiYgdGhpcy5oYW5kbGVTdWJtaXRTb2x1dGlvbih0aGlzLmlucHV0KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5rZXlEb3duTGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlU3VibWl0U29sdXRpb24oaW5wdXQ6IElucHV0LCBsZXZlbHNEYXRhID0gdGhpcy5sZXZlbHNEYXRhKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRMZXZlbCA9IHRoaXMuc3RvcmFnZS5nZXRWYWx1ZShTdG9yYWdlR2FtZURhdGFOYW1lcy5DVVJSRU5UX0xFVkVMKSBhcyBudW1iZXI7XG4gICAgICAgIGlmIChpbnB1dCkge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gdmFsaWRhdGVTb2x1dGlvbihpbnB1dC52YWx1ZSwgbGV2ZWxzRGF0YVtjdXJyZW50TGV2ZWwgLSAxXS5hbnN3ZXIpO1xuICAgICAgICAgICAgaW5wdXQudmFsdWUgPSAnJztcblxuICAgICAgICAgICAgY29uc3QgZWRpdG9yQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmVkaXRvcicpO1xuXG4gICAgICAgICAgICBpZiAoIXJlcy5jaGVja1Jlc3VsdCkge1xuICAgICAgICAgICAgICAgIGlmIChlZGl0b3JDb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3NoYWtlJyk7XG4gICAgICAgICAgICAgICAgICAgIGVkaXRvckNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3JDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgnc2hha2UnKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXMubm9kZXMgJiZcbiAgICAgICAgICAgICAgICAgICAgcmVzLm5vZGVzPy5mb3JFYWNoKChub2RlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnc3Ryb2JlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5jbGFzc0xpc3QuYWRkKCdjbGVhbicpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcy5ub2Rlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggKyAxID09PSByZXMubm9kZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2FuaW1hdGlvbmVuZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3JhZ2Uuc2V0Q29tcGxldGVkTGV2ZWwoY3VycmVudExldmVsLCB0aGlzLmhpbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBsZXRlZExldmVscyA9IHRoaXMuc3RvcmFnZS5nZXRWYWx1ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RvcmFnZUdhbWVEYXRhTmFtZXMuQ09NUExFVEVEXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSBhcyBDb21wbGV0ZWRMZXZlbHM7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudExldmVsIDwgdGhpcy5sZXZlbHNEYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3JhZ2Uuc2V0Q3VycmVudExldmVsKGN1cnJlbnRMZXZlbCArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb21wbGV0ZWRMZXZlbHMgJiYgY29tcGxldGVkTGV2ZWxzLnNpemUgPCAxMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxldmVsID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChjb21wbGV0ZWRMZXZlbHMuZ2V0KGxldmVsKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldmVsICs9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3JhZ2Uuc2V0Q3VycmVudExldmVsKGxldmVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhpbnQgPSBTdG9yYWdlQ29tcGxldGVkTmFtZXMuU0VMRjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGtleURvd25MaXN0ZW5lciA9IChlOiBLZXlib2FyZEV2ZW50KTogdm9pZCA9PiB7XG4gICAgICAgIGlmIChlLmtleSA9PT0gJ0VudGVyJykge1xuICAgICAgICAgICAgdGhpcy5idG4gJiYgdGhpcy5wcmVzc1N1Ym1pdEJ0bih0aGlzLmJ0bik7XG4gICAgICAgICAgICB0aGlzLmlucHV0ICYmIHRoaXMuaGFuZGxlU3VibWl0U29sdXRpb24odGhpcy5pbnB1dCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHJlc3NTdWJtaXRCdG4gPSAoYnRuOiBIVE1MQnV0dG9uRWxlbWVudCk6IHZvaWQgPT4ge1xuICAgICAgICBidG4uY2xhc3NMaXN0LmFkZCgnZW50ZXJoaXQnKTtcbiAgICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2FuaW1hdGlvbmVuZCcsICgpID0+IHtcbiAgICAgICAgICAgIGJ0bi5jbGFzc0xpc3QucmVtb3ZlKCdlbnRlcmhpdCcpO1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuIiwiaW1wb3J0IHsgRWxlbWVudCB9IGZyb20gJy4uLy4uLy4uL3R5cGVzL3R5cGUnO1xuaW1wb3J0IHsgdHJhbnNmb3JtVG9HYW1lTWFya3VwIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdHJhbnNmb3JtVG9NYXJrdXAnO1xuaW1wb3J0IERhdGFTdG9yYWdlIGZyb20gJy4uLy4uLy4uL2RhdGEtc3RvcmFnZS9EYXRhU3RvcmFnZSc7XG5pbXBvcnQgeyBJTGV2ZWxEYXRhIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvaW50ZXJmYWNlJztcbmltcG9ydCB7IFN0b3JhZ2VHYW1lRGF0YU5hbWVzIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvZW51bSc7XG5pbXBvcnQgeyBnZXRBbGxEZXNjZW5kYW50cyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2dldEFsbERlc2NlbmRhbnRzJztcblxuZXhwb3J0IGNsYXNzIE1hcmt1cFBhbmUge1xuICAgIHByaXZhdGUgc3RvcmFnZSA9IERhdGFTdG9yYWdlLmdldEluc3RhbmNlKCk7XG4gICAgcHJpdmF0ZSBsZXZlbHNEYXRhOiBJTGV2ZWxEYXRhW107XG5cbiAgICBjb25zdHJ1Y3RvcihsZXZlbHNEYXRhOiBJTGV2ZWxEYXRhW10pIHtcbiAgICAgICAgdGhpcy5sZXZlbHNEYXRhID0gbGV2ZWxzRGF0YTtcbiAgICAgICAgdGhpcy5zdG9yYWdlLnN1YnNjcmliZShTdG9yYWdlR2FtZURhdGFOYW1lcy5DVVJSRU5UX0xFVkVMLCAobGV2ZWwpID0+IHRoaXMuZHJhdyhsZXZlbCBhcyBudW1iZXIpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZHJhdyhsZXZlbDogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IG1hcmt1cFBhbmVDb250YWluZXI6IEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yPEhUTUxEaXZFbGVtZW50PignLm1hcmt1cC1wYW5lJyk7XG4gICAgICAgIGNvbnN0IGlubmVyTWFya3VwID0gdHJhbnNmb3JtVG9HYW1lTWFya3VwKHRoaXMubGV2ZWxzRGF0YVtsZXZlbCAtIDFdLmJvYXJkTWFya3VwKTtcbiAgICAgICAgY29uc3QgbWFya3VwUGFuZUxheW91dCA9IGBcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9J3BhbmUtaGVhZGVyJz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwYW5lLWhlYWRlcl9fbmFtZSc+SFRNTCBFZGl0b3I8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwYW5lLWhlYWRlcl9fZmlsZS1uYW1lJz50YWJsZS5odG1sPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9J3BhbmUtd2luZG93Jz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdsaW5lLW51bWJlcnMnPlxuICAgICAgICAgICAgICAgICAgICAxPGJyPjI8YnI+Mzxicj40PGJyPjU8YnI+Njxicj43PGJyPjg8YnI+OTxicj4xMDxicj4xMTxicj4xMjxicj4xMzxicj4xNDxicj4xNTxicj4xNjxicj4xNzxicj4xODxicj4xOTxicj4yMFxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3BhbmUtd2luZG93X19jb250ZW50Jz5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ndGFibGUtZGl2Jz4mbHQ7ZGl2IGNsYXNzPVwidGFibGVcIiZndDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAke2lubmVyTWFya3VwfVxuICAgICAgICAgICAgICAgICAgICAgICAgJmx0Oy9kaXYmZ3Q7XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIGA7XG5cbiAgICAgICAgaWYgKG1hcmt1cFBhbmVDb250YWluZXIpIHtcbiAgICAgICAgICAgIG1hcmt1cFBhbmVDb250YWluZXIuaW5uZXJIVE1MID0gbWFya3VwUGFuZUxheW91dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHRhYmxlRGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRhYmxlLWRpdicpO1xuICAgICAgICBpZiAodGFibGVEaXYgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgY29uc3QgZGVzY2VuZGFudHMgPSBnZXRBbGxEZXNjZW5kYW50cyh0YWJsZURpdik7XG4gICAgICAgICAgICBkZXNjZW5kYW50cyAmJlxuICAgICAgICAgICAgICAgIGRlc2NlbmRhbnRzLmZvckVhY2goKG5vZGUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlIGluc3RhbmNlb2YgSFRNTERpdkVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuZGF0YXNldC5nYW1lSWQgPSBpbmRleC50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBFbGVtZW50IH0gZnJvbSAnLi4vLi4vdHlwZXMvdHlwZSc7XG5cbmV4cG9ydCBjbGFzcyBGb290ZXIge1xuICAgIHB1YmxpYyBkcmF3KCk6IHZvaWQge1xuICAgICAgICBjb25zdCBmb290ZXJDb250YWluZXI6IEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yPEhUTUxEaXZFbGVtZW50PignZm9vdGVyJyk7XG4gICAgICAgIGNvbnN0IGZvb3RlckxheW91dCA9IGBcbiAgICAgICAgPGEgY2xhc3M9J2xvZ28taW1nJyBocmVmPSdodHRwczovL3JzLnNjaG9vbC8nPlxuICAgICAgICAgICAgPGltZyBzcmM9Jy4vYXNzZXRzL2xvZ29fcnMuc3ZnJyBhbHQ9J2xvZ28nPlxuICAgICAgICAgICAgPGgzPlJTIFNjaG9vbCAyMDIzPC9oMz5cbiAgICAgICAgPC9hPlxuXG4gICAgICAgIDxkaXYgY2xhc3M9J2dpdGh1Yi1pbWcnPlxuICAgICAgICAgICAgPGEgaHJlZj0naHR0cHM6Ly9naXRodWIuY29tL3ZzdGV6aGtvJz5cbiAgICAgICAgICAgICAgICA8aW1nIHNyYz0nLi9hc3NldHMvZ2gzLnN2ZycgYWx0PSdnaXRodWInPlxuICAgICAgICAgICAgPC9hPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgYDtcblxuICAgICAgICBpZiAoZm9vdGVyQ29udGFpbmVyKSB7XG4gICAgICAgICAgICBmb290ZXJDb250YWluZXIuaW5uZXJIVE1MID0gZm9vdGVyTGF5b3V0O1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRWxlbWVudCB9IGZyb20gJy4uLy4uL3R5cGVzL3R5cGUnO1xuXG5leHBvcnQgY2xhc3MgSGVhZGVyIHtcbiAgICBwdWJsaWMgZHJhdygpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgaGVhZGVyQ29udGFpbmVyOiBFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcjxIVE1MRGl2RWxlbWVudD4oJ2hlYWRlcicpO1xuICAgICAgICBjb25zdCBoZWFkZXJMYXlvdXQgPSBgXG4gICAgICAgIDxkaXYgY2xhc3M9J2xvZ28nPlxuICAgICAgICAgICAgPGgxPlNlbGVjdG9ycyBHYW1lPC9oMT5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9J21lbnUtY29udGFpbmVyJz48L2Rpdj5cbiAgICAgICAgYDtcblxuICAgICAgICBpZiAoaGVhZGVyQ29udGFpbmVyKSB7XG4gICAgICAgICAgICBoZWFkZXJDb250YWluZXIuaW5uZXJIVE1MID0gaGVhZGVyTGF5b3V0O1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRWxlbWVudCB9IGZyb20gJy4uLy4uL3R5cGVzL3R5cGUnO1xuaW1wb3J0IHsgZ2V0QWxsRGVzY2VuZGFudHMgfSBmcm9tICcuLi8uLi91dGlscy9nZXRBbGxEZXNjZW5kYW50cyc7XG5cbmV4cG9ydCBjbGFzcyBIb3ZlckVsZW1lbnRzV2F0Y2hlciB7XG4gICAgcHJpdmF0ZSByZWFkb25seSB0YWJsZTogRWxlbWVudDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IG1hcmt1cFBhbmU6IEVsZW1lbnQ7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy50YWJsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50YWJsZScpO1xuICAgICAgICB0aGlzLm1hcmt1cFBhbmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFya3VwLXBhbmUnKTtcblxuICAgICAgICBpZiAodGhpcy50YWJsZSAmJiB0aGlzLm1hcmt1cFBhbmUpIHtcbiAgICAgICAgICAgIHRoaXMudGFibGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgKGU6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBlLnRhcmdldC5kYXRhc2V0LmdhbWVJZCAmJiB0aGlzLmhvdmVyRWxlbWVudHMoZS50YXJnZXQuZGF0YXNldC5nYW1lSWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy50YWJsZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsIChlOiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZS50YXJnZXQuZGF0YXNldC5nYW1lSWQgJiYgdGhpcy51bkhvdmVyRWxlbWVudHMoZS50YXJnZXQuZGF0YXNldC5nYW1lSWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLm1hcmt1cFBhbmUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgKGU6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBlLnRhcmdldC5kYXRhc2V0LmdhbWVJZCAmJiB0aGlzLmhvdmVyRWxlbWVudHMoZS50YXJnZXQuZGF0YXNldC5nYW1lSWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5tYXJrdXBQYW5lLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3V0JywgKGU6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBlLnRhcmdldC5kYXRhc2V0LmdhbWVJZCAmJiB0aGlzLnVuSG92ZXJFbGVtZW50cyhlLnRhcmdldC5kYXRhc2V0LmdhbWVJZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnYXRoZXJFbGVtZW50cygpOiBIVE1MRWxlbWVudFtdIHwgbnVsbCB7XG4gICAgICAgIGlmICh0aGlzLnRhYmxlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgJiYgdGhpcy5tYXJrdXBQYW5lIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBbLi4uZ2V0QWxsRGVzY2VuZGFudHModGhpcy50YWJsZSksIC4uLmdldEFsbERlc2NlbmRhbnRzKHRoaXMubWFya3VwUGFuZSldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVUYWdJbmZvTGFiZWwoZWw6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHRhZ05hbWUgPSBlbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBjb25zdCBjbGFzc05hbWUgPSBBcnJheS5mcm9tKGVsLmNsYXNzTGlzdCkuZmlsdGVyKChpKSA9PiBpICE9PSAnc3Ryb2JlJylbMF07XG4gICAgICAgIGNvbnN0IGlkTmFtZSA9IGVsLmlkO1xuICAgICAgICBjb25zdCB0YWdJbmZvID0gYDwke3RhZ05hbWV9JHtpZE5hbWUgPyBcIiBpZD0nXCIgKyBpZE5hbWUgKyBcIidcIiA6ICcnfSR7XG4gICAgICAgICAgICBjbGFzc05hbWUgPyBcIiBjbGFzcz0nXCIgKyBjbGFzc05hbWUgKyBcIidcIiA6ICcnXG4gICAgICAgIH0+PC8ke3RhZ05hbWV9PmA7XG5cbiAgICAgICAgY29uc3QgdGFnTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGFnTGFiZWwuY2xhc3NMaXN0LmFkZCgndGFnLWxhYmVsJyk7XG4gICAgICAgIHRhZ0xhYmVsLnRleHRDb250ZW50ID0gdGFnSW5mbztcbiAgICAgICAgdGhpcy50YWJsZSAmJiB0aGlzLnRhYmxlLmFwcGVuZENoaWxkKHRhZ0xhYmVsKTtcbiAgICAgICAgdGFnTGFiZWwuc3R5bGUubGVmdCA9IGAke2VsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLSAxMTB9cHhgO1xuICAgIH1cblxuICAgIHJlbW92ZVRhZ0luZm9MYWJlbCgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgdGFnTGFiZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGFnLWxhYmVsJyk7XG4gICAgICAgIHRhZ0xhYmVsICYmIHRhZ0xhYmVsLnJlbW92ZSgpO1xuICAgIH1cblxuICAgIGhvdmVyRWxlbWVudHMoaWQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBjb25zdCBhbGxFbGVtZW50cyA9IHRoaXMuZ2F0aGVyRWxlbWVudHMoKTtcbiAgICAgICAgYWxsRWxlbWVudHMgJiZcbiAgICAgICAgICAgIGFsbEVsZW1lbnRzLmZvckVhY2goKGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVsLmRhdGFzZXQuZ2FtZUlkID09PSBpZCkge1xuICAgICAgICAgICAgICAgICAgICBlbC5kYXRhc2V0LmhvdmVyZWQgPSAndHJ1ZSc7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbC5ub2RlTmFtZSAhPT0gJ0RJVicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlVGFnSW5mb0xhYmVsKGVsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHVuSG92ZXJFbGVtZW50cyhpZDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGFsbEVsZW1lbnRzID0gdGhpcy5nYXRoZXJFbGVtZW50cygpO1xuICAgICAgICBhbGxFbGVtZW50cyAmJlxuICAgICAgICAgICAgYWxsRWxlbWVudHMuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZWwuZGF0YXNldC5nYW1lSWQgPT09IGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBlbC5kYXRhc2V0LmhvdmVyZWQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbC5ub2RlTmFtZSAhPT0gJ0RJVicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlVGFnSW5mb0xhYmVsKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBFbGVtZW50IH0gZnJvbSAnLi4vLi4vdHlwZXMvdHlwZSc7XG5pbXBvcnQgRGF0YVN0b3JhZ2UgZnJvbSAnLi4vLi4vZGF0YS1zdG9yYWdlL0RhdGFTdG9yYWdlJztcbmltcG9ydCB7IElMZXZlbERhdGEgfSBmcm9tICcuLi8uLi90eXBlcy9pbnRlcmZhY2UnO1xuaW1wb3J0IHsgU3RvcmFnZUdhbWVEYXRhTmFtZXMgfSBmcm9tICcuLi8uLi90eXBlcy9lbnVtJztcblxuZXhwb3J0IGNsYXNzIExldmVsSW5mbyB7XG4gICAgcHJpdmF0ZSBzdG9yYWdlID0gRGF0YVN0b3JhZ2UuZ2V0SW5zdGFuY2UoKTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGxldmVsc0RhdGE6IElMZXZlbERhdGFbXTtcblxuICAgIGNvbnN0cnVjdG9yKGxldmVsc0RhdGE6IElMZXZlbERhdGFbXSkge1xuICAgICAgICB0aGlzLmxldmVsc0RhdGEgPSBsZXZlbHNEYXRhO1xuICAgICAgICB0aGlzLnN0b3JhZ2Uuc3Vic2NyaWJlKFN0b3JhZ2VHYW1lRGF0YU5hbWVzLkNVUlJFTlRfTEVWRUwsIChsZXZlbCkgPT4gdGhpcy5kcmF3KGxldmVsIGFzIG51bWJlcikpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2VuZXJhdGVMYXlvdXQobGV2ZWxOdW1iZXI6IG51bWJlcik6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBgXG4gICAgICAgICAgICA8aDIgY2xhc3M9J3RhYmxlX19kb1RoaXMnPiR7dGhpcy5sZXZlbHNEYXRhW2xldmVsTnVtYmVyIC0gMV0uZG9UaGlzfTwvaDI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPSd0YWJsZV9fbm90ZSc+XG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9J3RhYmxlX190b2dnbGUnPkhlbHAsIEknbSBzdHVjayE8L3A+XG4gICAgICAgICAgICA8L2Rpdj4gXG4gICAgICAgIGA7XG4gICAgfVxuXG4gICAgYWRkRXZlbnRMaXN0ZW5lclRvSGludEJ0bihoZWxwQnRuOiBIVE1MRWxlbWVudCwgbGV2ZWxOdW1iZXI6IG51bWJlcik6IHZvaWQge1xuICAgICAgICBoZWxwQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zdG9yYWdlLnNldEhpbnRMZXZlbChsZXZlbE51bWJlcik7XG4gICAgICAgICAgICBoZWxwQnRuLmNsYXNzTGlzdC5hZGQoJ3RhYmxlX190b2dnbGVfaGlkZGVuJyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBkcmF3KGxldmVsTnVtYmVyOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgbGV2ZWxJbmZvQ29udGFpbmVyOiBFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcjxIVE1MRGl2RWxlbWVudD4oJy5sZXZlbC1pbmZvJyk7XG4gICAgICAgIGNvbnN0IGxldmVsSW5mb0xheW91dCA9IHRoaXMuZ2VuZXJhdGVMYXlvdXQobGV2ZWxOdW1iZXIpO1xuXG4gICAgICAgIGlmIChsZXZlbEluZm9Db250YWluZXIpIHtcbiAgICAgICAgICAgIGxldmVsSW5mb0NvbnRhaW5lci5pbm5lckhUTUwgPSBsZXZlbEluZm9MYXlvdXQ7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBoZWxwQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRhYmxlX190b2dnbGUnKTtcbiAgICAgICAgaWYgKGhlbHBCdG4gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyVG9IaW50QnRuKGhlbHBCdG4sIGxldmVsTnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IENvbXBsZXRlZExldmVscywgRWxlbWVudCB9IGZyb20gJy4uLy4uL3R5cGVzL3R5cGUnO1xuaW1wb3J0IHsgSUxldmVsRGF0YSB9IGZyb20gJy4uLy4uL3R5cGVzL2ludGVyZmFjZSc7XG5pbXBvcnQgRGF0YVN0b3JhZ2UgZnJvbSAnLi4vLi4vZGF0YS1zdG9yYWdlL0RhdGFTdG9yYWdlJztcbmltcG9ydCB7IFN0b3JhZ2VHYW1lRGF0YU5hbWVzIH0gZnJvbSAnLi4vLi4vdHlwZXMvZW51bSc7XG5pbXBvcnQgeyBCdXJnZXJCdG4gfSBmcm9tICcuLi9idXJnZXJCdG4vQnVyZ2VyQnRuJztcblxuZXhwb3J0IGNsYXNzIExldmVscyB7XG4gICAgcHJpdmF0ZSBzdG9yYWdlID0gRGF0YVN0b3JhZ2UuZ2V0SW5zdGFuY2UoKTtcbiAgICBwcml2YXRlIGxldmVsc0xpc3RDb250YWluZXI6IEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSByZWFkb25seSBsZXZlbHNEYXRhOiBJTGV2ZWxEYXRhW107XG4gICAgcHJpdmF0ZSBjb21wbGV0ZWRMZXZlbHM6IENvbXBsZXRlZExldmVscztcbiAgICBwcml2YXRlIGN1cnJlbnRMZXZlbDogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IobGV2ZWxzRGF0YTogSUxldmVsRGF0YVtdKSB7XG4gICAgICAgIHRoaXMubGV2ZWxzRGF0YSA9IGxldmVsc0RhdGE7XG4gICAgICAgIHRoaXMuY29tcGxldGVkTGV2ZWxzID0gdGhpcy5zdG9yYWdlLmdldFZhbHVlKFN0b3JhZ2VHYW1lRGF0YU5hbWVzLkNPTVBMRVRFRCkgYXMgQ29tcGxldGVkTGV2ZWxzO1xuICAgICAgICB0aGlzLmN1cnJlbnRMZXZlbCA9IHRoaXMuc3RvcmFnZS5nZXRWYWx1ZShTdG9yYWdlR2FtZURhdGFOYW1lcy5DVVJSRU5UX0xFVkVMKSBhcyBudW1iZXI7XG4gICAgICAgIHRoaXMuc3RvcmFnZS5zdWJzY3JpYmUoU3RvcmFnZUdhbWVEYXRhTmFtZXMuQ1VSUkVOVF9MRVZFTCwgKGxldmVsKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRMZXZlbCA9IGxldmVsIGFzIG51bWJlcjtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyTGV2ZWxzKHRoaXMuY3VycmVudExldmVsKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc3RvcmFnZS5zdWJzY3JpYmUoU3RvcmFnZUdhbWVEYXRhTmFtZXMuQ09NUExFVEVELCAoY29tcGxldGVkTGV2ZWxzKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNvbXBsZXRlZExldmVscyA9IGNvbXBsZXRlZExldmVscyBhcyBDb21wbGV0ZWRMZXZlbHM7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckxldmVscyh0aGlzLmN1cnJlbnRMZXZlbCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuc3RvcmFnZS5zdWJzY3JpYmUoU3RvcmFnZUdhbWVEYXRhTmFtZXMuV0lOLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckxldmVscyh0aGlzLmN1cnJlbnRMZXZlbCk7XG4gICAgICAgICAgICB0aGlzLnNob3dXaW5NZXNzYWdlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmxldmVsc0xpc3RDb250YWluZXIgPSBudWxsO1xuICAgIH1cblxuICAgIHNob3dXaW5NZXNzYWdlKCk6IHZvaWQge1xuICAgICAgICBjb25zdCB3aW5NZXNzYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHdpbk1lc3NhZ2UudGV4dENvbnRlbnQgPSAnWW91IGFyZSB3aW4hISEnO1xuICAgICAgICB3aW5NZXNzYWdlLmNsYXNzTGlzdC5hZGQoJ3dpbicpO1xuICAgICAgICB0aGlzLmxldmVsc0xpc3RDb250YWluZXIgJiYgdGhpcy5sZXZlbHNMaXN0Q29udGFpbmVyLmFwcGVuZCh3aW5NZXNzYWdlKTtcbiAgICAgICAgY29uc3QgYnVyZ2VyQnRuID0gQnVyZ2VyQnRuLmdldEluc3RhbmNlKCk7XG4gICAgICAgIGJ1cmdlckJ0bi50b2dnbGVCdG5MZXZlbHMoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdlbmVyYXRlTGV2ZWxzTGlzdExheW91dChjdXJyZW50TGV2ZWw6IG51bWJlcik6IHN0cmluZyB7XG4gICAgICAgIGxldCBnZW5lcmF0ZWRMZXZlbHMgPSAnJztcblxuICAgICAgICB0aGlzLmxldmVsc0RhdGEuZm9yRWFjaCgobGV2ZWw6IElMZXZlbERhdGEpID0+IHtcbiAgICAgICAgICAgIGdlbmVyYXRlZExldmVscyArPSBgXG4gICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xldmVsc19fbGV2ZWwgJHtsZXZlbC5sZXZlbE51bWJlciA9PT0gY3VycmVudExldmVsICYmICdsZXZlbHNfX2xldmVsX2N1cnJlbnQnfScgXG4gICAgICAgICAgICAgICAgZGF0YS1pZD0nJHtsZXZlbC5sZXZlbE51bWJlcn0nPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdjaGVja21hcmsgJHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wbGV0ZWRMZXZlbHMuaGFzKGxldmVsLmxldmVsTnVtYmVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAnY2hlY2ttYXJrX2NvbXBsZXRlZC0nICsgdGhpcy5jb21wbGV0ZWRMZXZlbHMuZ2V0KGxldmVsLmxldmVsTnVtYmVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAnJ1xuICAgICAgICAgICAgICAgIH0nPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nbGV2ZWwtbnVtYmVyJz4ke2xldmVsLmxldmVsTnVtYmVyfSA8L3NwYW4+JHtsZXZlbC5zeW50YXh9PC9hPlxuICAgICAgICAgICAgYDtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBnZW5lcmF0ZWRMZXZlbHM7XG4gICAgfVxuXG4gICAgcHVibGljIGRyYXcoY3VycmVudExldmVsOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgbGV2ZWxzQ29udGFpbmVyOiBFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcjxIVE1MRGl2RWxlbWVudD4oJy5sZXZlbHMnKTtcbiAgICAgICAgY29uc3QgbGV2ZWxzTGF5b3V0ID0gYFxuICAgICAgICAgICAgPGRpdiBjbGFzcz0nYmFja2dyb3VuZCc+PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdwb3B1cCc+XG4gICAgICAgICAgICAgICAgPGgyPkxldmVsczwvaDI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbGV2ZWxzX19saXN0Jz5cbiAgICAgICAgICAgICAgICAgICAgJHt0aGlzLmdlbmVyYXRlTGV2ZWxzTGlzdExheW91dChjdXJyZW50TGV2ZWwpfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdyZXNldC1wcm9ncmVzcycgaHJlZj0nIyc+UmVzZXQgUHJvZ3Jlc3M8L2E+XG4gICAgICAgICAgICA8L2Rpdj5cblxuXG4gICAgICAgIGA7XG4gICAgICAgIGlmIChsZXZlbHNDb250YWluZXIpIHtcbiAgICAgICAgICAgIGxldmVsc0NvbnRhaW5lci5pbm5lckhUTUwgKz0gbGV2ZWxzTGF5b3V0O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5sZXZlbHNMaXN0Q29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxldmVsc19fbGlzdCcpO1xuICAgICAgICBjb25zdCByZXNldEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5yZXNldC1wcm9ncmVzcycpO1xuICAgICAgICBjb25zdCBsZXZlbHNCYWNrZ3JvdW5kID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJhY2tncm91bmQnKTtcbiAgICAgICAgY29uc3QgYnVyZ2VyQnRuID0gQnVyZ2VyQnRuLmdldEluc3RhbmNlKCk7XG5cbiAgICAgICAgaWYgKHRoaXMubGV2ZWxzTGlzdENvbnRhaW5lciBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICYmICEhdGhpcy5sZXZlbHNMaXN0Q29udGFpbmVyKSB7XG4gICAgICAgICAgICB0aGlzLmxldmVsc0xpc3RDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZTogRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJiBlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2xldmVsc19fbGV2ZWwnKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQuZGF0YXNldC5pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGV2ZWw6IG51bWJlciA9ICtlLnRhcmdldC5kYXRhc2V0LmlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9yYWdlLnNldEN1cnJlbnRMZXZlbChsZXZlbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1cmdlckJ0bi50b2dnbGVCdG5MZXZlbHMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzZXRCdG4gJiZcbiAgICAgICAgICAgIHJlc2V0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RvcmFnZS5yZXNldEdhbWVQcm9ncmVzcygpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RvcmFnZS5zZXRDdXJyZW50TGV2ZWwoMSk7XG4gICAgICAgICAgICAgICAgYnVyZ2VyQnRuLnRvZ2dsZUJ0bkxldmVscygpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgbGV2ZWxzQmFja2dyb3VuZCAmJlxuICAgICAgICAgICAgbGV2ZWxzQmFja2dyb3VuZC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICBidXJnZXJCdG4udG9nZ2xlQnRuTGV2ZWxzKCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZW5kZXJMZXZlbHMoY3VycmVudExldmVsOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMubGV2ZWxzTGlzdENvbnRhaW5lcikge1xuICAgICAgICAgICAgdGhpcy5sZXZlbHNMaXN0Q29udGFpbmVyLmlubmVySFRNTCA9IHRoaXMuZ2VuZXJhdGVMZXZlbHNMaXN0TGF5b3V0KGN1cnJlbnRMZXZlbCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBJTGV2ZWxEYXRhIH0gZnJvbSAnLi4vLi4vdHlwZXMvaW50ZXJmYWNlJztcbmltcG9ydCB7IENvbXBsZXRlZExldmVscywgRWxlbWVudCB9IGZyb20gJy4uLy4uL3R5cGVzL3R5cGUnO1xuaW1wb3J0IERhdGFTdG9yYWdlIGZyb20gJy4uLy4uL2RhdGEtc3RvcmFnZS9EYXRhU3RvcmFnZSc7XG5pbXBvcnQgeyBTdG9yYWdlR2FtZURhdGFOYW1lcyB9IGZyb20gJy4uLy4uL3R5cGVzL2VudW0nO1xuXG5leHBvcnQgY2xhc3MgUnVsZXMge1xuICAgIHByaXZhdGUgc3RvcmFnZSA9IERhdGFTdG9yYWdlLmdldEluc3RhbmNlKCk7XG4gICAgcHJpdmF0ZSByZWFkb25seSBsZXZlbHNEYXRhOiBJTGV2ZWxEYXRhW107XG4gICAgcHJpdmF0ZSBjb21wbGV0ZWRMZXZlbHM6IENvbXBsZXRlZExldmVscztcbiAgICBwcml2YXRlIGN1cnJlbnRMZXZlbDogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IobGV2ZWxzRGF0YTogSUxldmVsRGF0YVtdKSB7XG4gICAgICAgIHRoaXMubGV2ZWxzRGF0YSA9IGxldmVsc0RhdGE7XG4gICAgICAgIHRoaXMuY29tcGxldGVkTGV2ZWxzID0gdGhpcy5zdG9yYWdlLmdldFZhbHVlKFN0b3JhZ2VHYW1lRGF0YU5hbWVzLkNPTVBMRVRFRCkgYXMgQ29tcGxldGVkTGV2ZWxzO1xuICAgICAgICB0aGlzLmN1cnJlbnRMZXZlbCA9IHRoaXMuc3RvcmFnZS5nZXRWYWx1ZShTdG9yYWdlR2FtZURhdGFOYW1lcy5DVVJSRU5UX0xFVkVMKSBhcyBudW1iZXI7XG4gICAgICAgIHRoaXMuc3RvcmFnZS5zdWJzY3JpYmUoU3RvcmFnZUdhbWVEYXRhTmFtZXMuQ1VSUkVOVF9MRVZFTCwgKGxldmVsKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRMZXZlbCA9IGxldmVsIGFzIG51bWJlcjtcbiAgICAgICAgICAgIHRoaXMuZHJhdyh0aGlzLmN1cnJlbnRMZXZlbCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnN0b3JhZ2Uuc3Vic2NyaWJlKFN0b3JhZ2VHYW1lRGF0YU5hbWVzLkNPTVBMRVRFRCwgKGNvbXBsZXRlZExldmVscykgPT4ge1xuICAgICAgICAgICAgdGhpcy5jb21wbGV0ZWRMZXZlbHMgPSBjb21wbGV0ZWRMZXZlbHMgYXMgQ29tcGxldGVkTGV2ZWxzO1xuICAgICAgICAgICAgdGhpcy5kcmF3KHRoaXMuY3VycmVudExldmVsKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGRyYXcoY3VycmVudExldmVsOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgcnVsZXNDb250YWluZXI6IE5vZGVMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnJ1bGVzJyk7XG4gICAgICAgIGNvbnN0IHJ1bGVzTGF5b3V0ID0gYFxuICAgICAgICAgICAgPGgyIGNsYXNzPSdydWxlc19faGVhZGVyICR7XG4gICAgICAgICAgICAgICAgdGhpcy5jb21wbGV0ZWRMZXZlbHMuaGFzKHRoaXMuY3VycmVudExldmVsKVxuICAgICAgICAgICAgICAgICAgICA/ICdydWxlc19faGVhZGVyX2NvbXBsZXRlZC0nICsgdGhpcy5jb21wbGV0ZWRMZXZlbHMuZ2V0KHRoaXMuY3VycmVudExldmVsKVxuICAgICAgICAgICAgICAgICAgICA6ICcnXG4gICAgICAgICAgICB9Jz5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ncnVsZXNfX3RleHQnPkxldmVsICR7dGhpcy5sZXZlbHNEYXRhW2N1cnJlbnRMZXZlbCAtIDFdLmxldmVsTnVtYmVyfSBvZiAxMDwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nY2hlY2ttYXJrJz48L3NwYW4+XG4gICAgICAgICAgICA8L2gyPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz0nbGV2ZWwtbmF2Jz5cbiAgICAgICAgICAgICAgICA8YSBjbGFzcz0ncHJldic+PC9hPlxuICAgICAgICAgICAgICAgIDxhIGNsYXNzPSduZXh0Jz48L2E+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzcz0ncnVsZXNfX2NvbnRlbnQnPlxuICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0nc2VsZWN0b3ItbmFtZSc+JHt0aGlzLmxldmVsc0RhdGFbY3VycmVudExldmVsIC0gMV0uc2VsZWN0b3JOYW1lfTwvaDQ+XG4gICAgICAgICAgICAgICAgPGgzIGNsYXNzPSd0aXRsZSc+JHt0aGlzLmxldmVsc0RhdGFbY3VycmVudExldmVsIC0gMV0udGl0bGV9PC9oMz5cbiAgICAgICAgICAgICAgICA8aDQgY2xhc3M9J3N5bnRheCc+JHt0aGlzLmxldmVsc0RhdGFbY3VycmVudExldmVsIC0gMV0uc3ludGF4fTwvaDQ+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0naGludCc+JHt0aGlzLmxldmVsc0RhdGFbY3VycmVudExldmVsIC0gMV0uaGludH08L2Rpdj5cbiAgICAgICAgICAgICAgICA8aDUgY2xhc3M9J2V4YW1wbGVzLXRpdGxlJz5FeGFtcGxlczwvaDU+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nZXhhbXBsZXMnPlxuICAgICAgICAgICAgICAgICAgICAke3RoaXMubGV2ZWxzRGF0YVtjdXJyZW50TGV2ZWwgLSAxXS5leGFtcGxlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZXgpID0+IGA8ZGl2IGNsYXNzPSdleGFtcGxlJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICR7ZXh9XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PmBcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKCcnKX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICBgO1xuXG4gICAgICAgIGlmIChydWxlc0NvbnRhaW5lci5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJ1bGVzQ29udGFpbmVyLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uaW5uZXJIVE1MID0gcnVsZXNMYXlvdXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBvcGVuQnRuOiBFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJ1bGVzX19oZWFkZXInKTtcbiAgICAgICAgb3BlbkJ0biAmJlxuICAgICAgICAgICAgb3BlbkJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICBvcGVuQnRuLmNsYXNzTGlzdC50b2dnbGUoJ3J1bGVzX19oZWFkZXJfb3BlbmVkJyk7XG4gICAgICAgICAgICAgICAgcnVsZXNDb250YWluZXIuZm9yRWFjaCgoaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpLmNsYXNzTGlzdC50b2dnbGUoJ3J1bGVzX29wZW5lZCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBwcmV2OiBOb2RlTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wcmV2Jyk7XG4gICAgICAgIGNvbnN0IG5leHQ6IE5vZGVMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm5leHQnKTtcblxuICAgICAgICBbLi4ucHJldiwgLi4ubmV4dF0uZm9yRWFjaCgoYnRuKSA9PiB7XG4gICAgICAgICAgICBpZiAoYnRuIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ0bi5jbGFzc0xpc3QuY29udGFpbnMoJ25leHQnKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sZXZlbHNEYXRhW2N1cnJlbnRMZXZlbCAtIDFdLmxldmVsTnVtYmVyIDwgdGhpcy5sZXZlbHNEYXRhLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcmFnZS5zZXRDdXJyZW50TGV2ZWwodGhpcy5sZXZlbHNEYXRhW2N1cnJlbnRMZXZlbCAtIDFdLmxldmVsTnVtYmVyICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoYnRuLmNsYXNzTGlzdC5jb250YWlucygncHJldicpICYmIHRoaXMubGV2ZWxzRGF0YVtjdXJyZW50TGV2ZWwgLSAxXS5sZXZlbE51bWJlciA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcmFnZS5zZXRDdXJyZW50TGV2ZWwodGhpcy5sZXZlbHNEYXRhW2N1cnJlbnRMZXZlbCAtIDFdLmxldmVsTnVtYmVyIC0gMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgSUxldmVsRGF0YSB9IGZyb20gJy4uLy4uL3R5cGVzL2ludGVyZmFjZSc7XG5pbXBvcnQgeyBsZXZlbHNEYXRhIH0gZnJvbSAnLi4vLi4vbW9kZWwvbGV2ZWxzRGF0YSc7XG5pbXBvcnQgeyBFbGVtZW50IH0gZnJvbSAnLi4vLi4vdHlwZXMvdHlwZSc7XG5pbXBvcnQgRGF0YVN0b3JhZ2UgZnJvbSAnLi4vLi4vZGF0YS1zdG9yYWdlL0RhdGFTdG9yYWdlJztcbmltcG9ydCB7IFN0b3JhZ2VHYW1lRGF0YU5hbWVzIH0gZnJvbSAnLi4vLi4vdHlwZXMvZW51bSc7XG5pbXBvcnQgeyBnZXRBbGxEZXNjZW5kYW50cyB9IGZyb20gJy4uLy4uL3V0aWxzL2dldEFsbERlc2NlbmRhbnRzJztcblxuZXhwb3J0IGNsYXNzIFRhYmxlIHtcbiAgICBwcml2YXRlIHN0b3JhZ2UgPSBEYXRhU3RvcmFnZS5nZXRJbnN0YW5jZSgpO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgbGV2ZWxzRGF0YTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHRhYmxlOiBFbGVtZW50O1xuXG4gICAgY29uc3RydWN0b3IobGV2ZWxzRGF0YTogSUxldmVsRGF0YVtdKSB7XG4gICAgICAgIHRoaXMuc3RvcmFnZS5zdWJzY3JpYmUoU3RvcmFnZUdhbWVEYXRhTmFtZXMuQ1VSUkVOVF9MRVZFTCwgKGxldmVsKSA9PiB0aGlzLmRyYXcobGV2ZWwgYXMgbnVtYmVyKSk7XG4gICAgICAgIHRoaXMubGV2ZWxzRGF0YSA9IGxldmVsc0RhdGE7XG4gICAgICAgIHRoaXMudGFibGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGFibGUnKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZHJhdyhjdXJyZW50TGV2ZWw6IG51bWJlcik6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy50YWJsZSkge1xuICAgICAgICAgICAgdGhpcy50YWJsZS5pbm5lckhUTUwgPSBsZXZlbHNEYXRhW2N1cnJlbnRMZXZlbCAtIDFdLnJlYWxNYXJrdXA7XG4gICAgICAgICAgICBjb25zdCBkZXNjZW5kYW50cyA9IGdldEFsbERlc2NlbmRhbnRzKHRoaXMudGFibGUpO1xuICAgICAgICAgICAgZGVzY2VuZGFudHMgJiZcbiAgICAgICAgICAgICAgICBkZXNjZW5kYW50cy5mb3JFYWNoKChub2RlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLmRhdGFzZXQuZ2FtZUlkID0gaW5kZXgudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgLnRhYmxlICR7bGV2ZWxzRGF0YVtjdXJyZW50TGV2ZWwgLSAxXS5zZWxlY3Rvcn1gKS5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICAgICAgICAgICAgbm9kZS5jbGFzc0xpc3QuYWRkKCdzdHJvYmUnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MDcpO1xuIl0sIm5hbWVzIjpbImNvbnN0cnVjdG9yIiwidGhpcyIsImFwcFZpZXciLCJBcHBWaWV3Iiwic3RhcnQiLCJkcmF3Q29tcG9uZW50cyIsImRyYXdCdXJnZXJCdG4iLCJEYXRhU3RvcmFnZSIsImdhbWVEYXRhIiwiZ2V0R2FtZURhdGFGcm9tTFMiLCJnZW5lcmF0ZVN0YXJ0RGF0YSIsIl9saXN0ZW5lcnMiLCJNYXAiLCJzdGF0aWMiLCJpbnN0YW5jZURhdGFTdG9yYWdlIiwic2V0SGludExldmVsIiwidmFsdWUiLCJTdG9yYWdlR2FtZURhdGFOYW1lcyIsIkhJTlQiLCJub3RpZnkiLCJzZXRDdXJyZW50TGV2ZWwiLCJDVVJSRU5UX0xFVkVMIiwiQ09NUExFVEVEIiwic2l6ZSIsImxldmVsc0RhdGEiLCJsZW5ndGgiLCJzYXZlR2FtZURhdGEiLCJjb21wbGV0ZWQiLCJjdXJyTGV2ZWwiLCJ3aW4iLCJXSU4iLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsIkFycmF5IiwiZnJvbSIsInNldENvbXBsZXRlZExldmVsIiwiY29tcGxldGVkVHlwZSIsImNvbXBsZXRlZE1hcCIsInNldCIsInJlc2V0R2FtZVByb2dyZXNzIiwiZ2V0VmFsdWUiLCJuYW1lIiwibHNEYXRhQ29tcGxldGVkIiwiZ2V0SXRlbSIsImxzRGF0YUN1cnJlbnRMZXZlbCIsImxzRGF0YVdpbiIsIk51bWJlciIsInBhcnNlIiwic3Vic2NyaWJlIiwibmFtZUV2ZW50IiwibGlzdGVuZXJNZXRob2QiLCJsaXN0TGlzdGVuZXJzIiwiZ2V0IiwiU2V0IiwiYWRkIiwicGFyYW1zIiwiZm9yRWFjaCIsImxpc3RlbmVyIiwiY29uc29sZSIsImxvZyIsImxldmVsTnVtYmVyIiwidGl0bGUiLCJzZWxlY3Rvck5hbWUiLCJkb1RoaXMiLCJzZWxlY3RvciIsInN5bnRheCIsImhpbnQiLCJleGFtcGxlcyIsImJvYXJkTWFya3VwIiwicmVhbE1hcmt1cCIsImFuc3dlciIsInRlbXBsYXRlIiwiY3VycmVudExldmVsIiwiT2JqZWN0IiwiYXNzaWduIiwiU3RvcmFnZUNvbXBsZXRlZE5hbWVzIiwiZ2V0QWxsRGVzY2VuZGFudHMiLCJlbGVtZW50IiwiZGVzY2VuZGFudHMiLCJnZXREZXNjZW5kYW50cyIsImNoaWxkTm9kZXMiLCJjaGlsZCIsIm5vZGVUeXBlIiwiTm9kZSIsIkVMRU1FTlRfTk9ERSIsIkhUTUxFbGVtZW50IiwicHVzaCIsInRyYW5zZm9ybVRvR2FtZU1hcmt1cCIsImh0bWwiLCJtYXAiLCJ0YWciLCJ0ZXN0IiwicmVwbGFjZSIsImpvaW4iLCJ2YWxpZGF0ZVNvbHV0aW9uIiwic29sdXRpb24iLCJ0YWJsZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInJlc3VsdCIsImNoZWNrUmVzdWx0Iiwibm9kZXMiLCJhcnIiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZWxlbSIsInRhZ05hbWUiLCJ0b0xvd2VyQ2FzZSIsInN0b3JhZ2UiLCJnZXRJbnN0YW5jZSIsInN0YXJ0TGV2ZWwiLCJoZWFkZXIiLCJIZWFkZXIiLCJmb290ZXIiLCJGb290ZXIiLCJsZXZlbHMiLCJMZXZlbHMiLCJydWxlcyIsIlJ1bGVzIiwiaW5wdXRQYW5lIiwiSW5wdXRQYW5lIiwibWFya3VwUGFuZSIsIk1hcmt1cFBhbmUiLCJUYWJsZSIsImxldmVsSW5mbyIsIkxldmVsSW5mbyIsImhvdmVyRWxlbWVudHNXYXRjaGVyIiwiSG92ZXJFbGVtZW50c1dhdGNoZXIiLCJkcmF3IiwiYnRuIiwiQnVyZ2VyQnRuIiwibWVudSIsImJvZHkiLCJsZXZlbHNDb250YWluZXIiLCJCdG5MYXlvdXRMZXZlbHMiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiaW5uZXJIVE1MIiwiYWRkRXZlbnRMaXN0ZW5lciIsInRvZ2dsZUJ0bkxldmVscyIsImluc3RhbmNlQnVyZ2VyQnRuIiwiY29udGFpbmVyRWxlbWVudCIsImFwcGVuZCIsInRvZ2dsZSIsImtleURvd25MaXN0ZW5lciIsImUiLCJrZXkiLCJwcmVzc1N1Ym1pdEJ0biIsImlucHV0IiwiaGFuZGxlU3VibWl0U29sdXRpb24iLCJyZW1vdmUiLCJTRUxGIiwibGV2ZWwiLCJzZXRIaW50VmFsdWUiLCJjbGVhcklucHV0IiwiZGlzYWJsZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaW5kZXgiLCJpbnRlcnZhbCIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsImlucHV0UGFuZUNvbnRhaW5lciIsInJlcyIsImVkaXRvckNvbnRhaW5lciIsIm5vZGUiLCJjb21wbGV0ZWRMZXZlbHMiLCJtYXJrdXBQYW5lQ29udGFpbmVyIiwibWFya3VwUGFuZUxheW91dCIsInRhYmxlRGl2IiwiSFRNTERpdkVsZW1lbnQiLCJkYXRhc2V0IiwiZ2FtZUlkIiwidG9TdHJpbmciLCJmb290ZXJDb250YWluZXIiLCJoZWFkZXJDb250YWluZXIiLCJ0YXJnZXQiLCJob3ZlckVsZW1lbnRzIiwidW5Ib3ZlckVsZW1lbnRzIiwiZ2F0aGVyRWxlbWVudHMiLCJjcmVhdGVUYWdJbmZvTGFiZWwiLCJlbCIsIm5vZGVOYW1lIiwiY2xhc3NOYW1lIiwiZmlsdGVyIiwiaSIsImlkTmFtZSIsImlkIiwidGFnSW5mbyIsInRhZ0xhYmVsIiwidGV4dENvbnRlbnQiLCJhcHBlbmRDaGlsZCIsInN0eWxlIiwibGVmdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInJlbW92ZVRhZ0luZm9MYWJlbCIsImFsbEVsZW1lbnRzIiwiaG92ZXJlZCIsImdlbmVyYXRlTGF5b3V0IiwiYWRkRXZlbnRMaXN0ZW5lclRvSGludEJ0biIsImhlbHBCdG4iLCJsZXZlbEluZm9Db250YWluZXIiLCJsZXZlbEluZm9MYXlvdXQiLCJyZW5kZXJMZXZlbHMiLCJzaG93V2luTWVzc2FnZSIsImxldmVsc0xpc3RDb250YWluZXIiLCJ3aW5NZXNzYWdlIiwiZ2VuZXJhdGVMZXZlbHNMaXN0TGF5b3V0IiwiZ2VuZXJhdGVkTGV2ZWxzIiwiaGFzIiwibGV2ZWxzTGF5b3V0IiwicmVzZXRCdG4iLCJsZXZlbHNCYWNrZ3JvdW5kIiwiYnVyZ2VyQnRuIiwiY29udGFpbnMiLCJydWxlc0NvbnRhaW5lciIsInJ1bGVzTGF5b3V0IiwiZXgiLCJpdGVtIiwib3BlbkJ0biIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiY2FsbCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsImRlZmluZVByb3BlcnR5Il0sInNvdXJjZVJvb3QiOiIifQ==