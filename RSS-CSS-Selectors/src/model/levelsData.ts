import { ILevelData } from '../types/interface';

export const levelsData: ILevelData[] = [
    {
        levelNumber: 1,
        title: 'Select elements by their type',
        selectorName: 'Descendant Selector',
        doThis: 'Select the plates',
        selector: 'plate',
        syntax: 'A B',
        hint: 'Selects all <strong>B</strong> inside of <strong>A</strong>. <strong>B</strong> is called a descendant because it is inside of another element.',
        examples: [
            '<strong>p&nbsp;&nbsp;strong</strong> selects all <tag>strong</tag> elements that are inside of any <tag>p</tag>',
            '<strong>#fancy&nbsp;&nbsp;span</strong> selects any <tag>span</tag> elements that are inside of the element with <strong>id="fancy"</strong>',
        ],
        boardMarkup: ['<plate />', '<plate />'],
        realMarkup: `<plate></plate><plate></plate>`,
        answer: 'plate plate',
    },
    {
        levelNumber: 2,
        title: 'Select elements by their ID',
        selectorName: 'ID Selector',
        doThis: 'Select the plate with the ID "fancy"',
        selector: '#fancy',
        syntax: '#idname',
        hint: 'Selects the element with the specified <strong>idname</strong>. The ID is defined using the <strong>id</strong> attribute in the HTML markup.',
        examples: ['<strong>#fancy</strong> selects the element with the ID <tag>fancy</tag>.'],
        boardMarkup: ['<plate />', '<plate id="fancy" />', '<plate />'],
        realMarkup: `<plate></plate><plate id='fancy'></plate><plate></plate>`,
        answer: 'plate',
    },
    {
        levelNumber: 3,
        title: 'Select elements by their tag name',
        selectorName: 'Combine the Descendant & ID Selectors',
        doThis: 'Select the apple on the plate',
        selector: 'plate apple',
        syntax: 'A B',
        hint: 'Selects all <strong>B</strong> inside of <strong>A</strong>. <strong>B</strong> is called a descendant because it is inside of another element.',
        examples: [
            '<strong>p&nbsp;&nbsp;strong</strong> selects all <tag>strong</tag> elements that are inside of any <tag>p</tag>',
            '<strong>#fancy&nbsp;&nbsp;span</strong> selects any <tag>span</tag> elements that are inside of the element with <strong>id="fancy"</strong>',
        ],
        boardMarkup: ['<plate />', '<plate>', '<apple />', '</plate>', '<apple />'],
        realMarkup: `<plate></plate><plate><apple></apple></plate><apple></apple>`,
        answer: 'apple',
    },
    {
        levelNumber: 4,
        title: 'Select the apple on the fancy plate',
        selectorName: 'Select apple on the fancy plate',
        doThis: 'Select the apple on the fancy plate',
        selector: '#fancy apple',
        syntax: '#id A',
        hint: 'You can combine any selector with the descendent selector.',
        examples: [
            '<strong>#cool&nbsp;span</strong> selects all <tag>span</tag> elements that are inside of elements with <strong>id="cool"</strong>',
        ],
        boardMarkup: ['<plate>', '<apple />', '</plate>', '<plate id="fancy">', '<apple />', '</plate>'],
        realMarkup: `<plate><apple></apple></plate><plate id='fancy'><apple></apple></plate>`,
        answer: 'apple',
    },
    {
        levelNumber: 5,
        title: 'Select elements by their class',
        selectorName: 'Class selector',
        doThis: 'Select blue bentos',
        selector: 'bento.blue',
        syntax: '.classname',
        hint: 'The class selector selects all elements with that class attribute. Elements can only have one ID, but many classes.',
        examples: ['<strong>.neato</strong> selects all elements with <strong>class="neato"</strong>'],
        boardMarkup: ['<bento />', '<bento class="blue">', '<bento />'],
        realMarkup: `<bento></bento><bento class='blue'></bento><bento></bento>`,
        answer: 'bento',
    },
    {
        levelNumber: 6,
        title: 'Combine, selectors, with... commas!',
        selectorName: 'Comma Combinator',
        doThis: 'Select all apples and oranges',
        selector: 'apple, orange',
        syntax: 'A, B',
        hint: 'Thanks to Shatner technology, this selects all <strong>A</strong> and <strong>B</strong> elements. You can combine any selectors this way, and you can specify more than two.',
        examples: [
            '<strong>p, .fun</strong> selects all <tag>p</tag> elements as well as all elements with <strong>class="fun"</strong>',
            '<strong>a, p, div</strong> selects all <tag>a</tag>, <tag>p</tag> and <tag>div</tag> elements',
        ],
        boardMarkup: ['<orange />', '<bento />', '<apple />', '<orange />'],
        realMarkup: `<orange></orange><bento></bento><apple></apple><orange></orange>`,
        answer: 'orange apple orange',
    },
    {
        levelNumber: 7,
        title: 'Select everything on the bento',
        selectorName: 'Combine the Universal Selector',
        doThis: 'Select all things on the bento',
        selector: 'bento *',
        syntax: 'A *',
        hint: 'This selects all elements inside of <strong>A</strong>.',
        examples: [
            '<strong>p *</strong> selects every element inside all <tag>p</tag> elements.',
            '<strong>ul.fancy *</strong> selects every element inside all <tag>ul class="fancy"</tag> elements.',
        ],
        boardMarkup: [
            '<bento>',
            '<orange />',
            '</bento>',
            '<plate>',
            '<orange />',
            '</plate>',
            '<bento>',
            '<apple />',
            '</bento>',
        ],
        realMarkup: `<bento><orange></orange></bento><plate><orange></orange></plate><bento><apple></apple></bento>`,
        answer: 'orange apple',
    },
    {
        levelNumber: 8,
        title: 'Select orange that follows apple',
        selectorName: 'General Sibling Selector',
        doThis: 'Select orange after apple',
        selector: 'apple ~ orange',
        syntax: 'A ~ B',
        hint: 'You can select all siblings of an element that follow it. This is like the Adjacent Selector (A + B) except it gets all of the following elements instead of one.',
        examples: ['<strong>A ~ B</strong> selects all <strong>B</strong> that follow a <strong>A</strong>'],
        boardMarkup: ['<orange />', '<apple />', '<orange />'],
        realMarkup: `<orange></orange><apple></apple><orange></orange>`,
        answer: 'orange',
    },
    {
        levelNumber: 9,
        title: 'Select the first element of a specific type',
        selectorName: 'First of Type Selector',
        doThis: 'Select first plate',
        selector: 'plate:first-of-type',
        syntax: ':first-of-type',
        hint: 'Selects the first element of that type within another element.',
        examples: ['<strong>span:first-of-type</strong> selects the first <tag>span</tag> in any element.'],
        boardMarkup: ['<orange />', '<plate />', '<apple />', '<plate />'],
        realMarkup: `<orange></orange><plate></plate><apple></apple><plate></plate>`,
        answer: 'plate',
    },
    {
        levelNumber: 10,
        title: "Select elements that don't have children",
        selectorName: 'Empty Selector',
        doThis: 'Select the empty plates',
        selector: 'plate:empty',
        syntax: ':empty',
        hint: "Selects elements that don't have any other elements inside of them.",
        examples: ['<strong>div:empty</strong> selects all empty <tag>div</tag> elements.'],
        boardMarkup: ['<plate>', '<apple />', '</plate>', '<bento />', '<plate />'],
        realMarkup: `<plate><apple></apple></plate><bento></bento><plate></plate>`,
        answer: 'plate',
    },
];
